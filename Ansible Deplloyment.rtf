{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Verdana;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red0\green0\blue0;\red0\green0\blue233;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl440\partightenfactor0

\f0\b\fs36 \cf0 \expnd0\expndtw0\kerning0
Exercise: Running Ansible Commands Against Hosts 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Display the current version and status of the Ansible application.\
2. Using the appropriate module, from your control server, list all the hosts configured in your environment. Using ansible, run a ping command against all hosts in the environment.\
3. List the contents of your ansible 'hosts' file. Using only ONE of the groups in the file, attempt to install the 'lynx' package on that server.\
4. Using the same group as Step #3, attempt to install the 'telnet' package on that server using the more 'playbook friendly' module and syntax.\
\'a0\
Solution\
\
1. Display the current version and status of the Ansible application.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Using the appropriate module, from your control server, list all the hosts configured in your environment. Using ansible, run a ping command against all hosts in the environment.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \

\f1 [test@tcox3 ~]$ ansible all -m ping
\f0 \

\f1 localhost | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": false,
\f0 \

\f1 \'a0 \'a0 "ping": "pong"
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 tcox5.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": false,
\f0 \

\f1 \'a0 \'a0 "ping": "pong"
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 tcox4.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": false,
\f0 \

\f1 \'a0 \'a0 "ping": "pong"
\f0 \

\f1 \}
\f0 \
\'a0\
3. List the contents of your ansible 'hosts' file. Using only ONE of the groups in the file, attempt to install the 'lynx' package on that server.\

\f1 [test@tcox3 ~]$ cat /etc/ansible/hosts
\f0 \

\f1 [local]
\f0 \

\f1 localhost
\f0 \
\'a0\

\f1 [apacheweb]
\f0 \

\f1 tcox4.mylabserver.com
\f0 \
\'a0\

\f1 [appserver]
\f0 \

\f1 tcox5.mylabserver.com
\f0 \
\'a0\

\f1 [test@tcox3 ~]$ ansible apacheweb -s -m shell -a 'yum -y install lynx'
\f0 \

\f1 tcox4.mylabserver.com | success | rc=0 >>
\f0 \

\f1 Loaded plugins: fastestmirror
\f0 \

\f1 Loading mirror speeds from cached hostfile
\f0 \

\f1 \'a0* base: distro.ibiblio.org
\f0 \

\f1 \'a0* epel: mirror.symnds.com
\f0 \

\f1 \'a0* extras: mirror.cogentco.com
\f0 \

\f1 \'a0* updates: mirror.cogentco.com
\f0 \

\f1 Package lynx-2.8.8-0.3.dev15.el7.x86_64 already installed and latest version
\f0 \

\f1 Nothing to do
\f0 \
\'a0\
4. Using the same group as Step #3, attempt to install the 'telnet' package on that server using the more 'playbook friendly' module and syntax.\

\f1 [test@tcox3 ~]$ ansible apacheweb -s -m yum -a 'pkg=telnet state=installed update_cache=true'
\f0 \

\f1 tcox4.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": false,
\f0 \

\f1 \'a0 \'a0 "msg": "",
\f0 \

\f1 \'a0 \'a0 "rc": 0,
\f0 \

\f1 \'a0 \'a0 "results": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "telnet-0.17-59.el7.x86_64 providing telnet is already installed"
\f0 \

\f1 \'a0 \'a0 ]
\f0 \

\f1 \}
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Querying a Remote System\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. On the control server, display the ansible version and status and issue an ansible command to list all configured hosts.\
2. Choosing ONE of the groups from the displayed list in Step #1 above, query that system for all the 'facts' that can be displayed, while filtering the content for the IP address information.\
3. Using the same group from Steps #1 and #2, issue a shell command through ansible that will determine if the 'lynx' package is already installed on that server.\
4. Using the same group, issue an ansible command (as sudo) that will display the last ten lines of output from the remote system's 'syslog' file.\
\'a0\
Solution\
. On the control server, display the ansible version and status and issue an ansible command to list all configured hosts.\
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs20 \cf0 \sub [test@tcox3 ~]$ ansible --version
\fs24 \nosupersub \

\fs20 \sub ansible 1.9.2
\fs24 \nosupersub \

\fs20 \sub \'a0 configured module search path = None
\fs24 \nosupersub \

\fs20 \sub [test@tcox3 ~]$ ansible all --list-hosts
\fs24 \nosupersub \

\fs20 \sub \'a0 \'a0 tcox5.mylabserver.com
\fs24 \nosupersub \

\fs20 \sub \'a0 \'a0 localhost
\fs24 \nosupersub \

\fs20 \sub \'a0 \'a0 tcox4.mylabserver.com
\fs24 \nosupersub \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 \'a0\
2. Choosing ONE of the groups from the displayed list in Step #1 above, query that system for all the 'facts' that can be displayed, while filtering the content for the IP address information.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible apacheweb -m setup -a 'filter=ans*ipv4*'
\f0 \

\f1 tcox4.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "ansible_facts": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_all_ipv4_addresses": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "172.31.108.45"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 ],
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_default_ipv4": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "address": "172.31.108.45",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "alias": "eth0",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "gateway": "172.31.96.1",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "interface": "eth0",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "macaddress": "12:29:fb:d6:9a:af",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "mtu": 9001,
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "netmask": "255.255.240.0",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "network": "172.31.96.0",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "type": "ether"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \}
\f0 \

\f1 \'a0 \'a0 \},
\f0 \

\f1 \'a0 \'a0 "changed": false
\f0 \

\f1 \}
\f0 \
\'a0\
3. Using the same group from Steps #1 and #2, issue a shell command through ansible that will determine if the 'lynx' package is already installed on that server.\

\f1 [test@tcox3 ~]$ ansible apacheweb -m shell -a 'yum list installed | grep lynx'
\f0 \

\f1 tcox4.mylabserver.com | success | rc=0 >>
\f0 \

\f1 lynx.x86_64 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 2.8.8-0.3.dev15.el7 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0@base
\f0 \
\'a0\
4. Using the same group, issue an ansible command (as sudo) that will display the last ten lines of output from the remote system's 'syslog' file.\

\f1 [test@tcox3 ~]$ ansible apacheweb -m shell -a 'tail -n 10 /var/log/dmesg'
\f0 \

\f1 tcox4.mylabserver.com | success | rc=0 >>
\f0 \

\f1 [ \'a0 \'a03.577455] SELinux: initialized (dev autofs, type autofs), uses genfs_contexts
\f0 \

\f1 [ \'a0 \'a03.621406] SELinux: initialized (dev hugetlbfs, type hugetlbfs), uses transition SIDs
\f0 \

\f1 [ \'a0 \'a03.748973] systemd-udevd[504]: starting version 208
\f0 \

\f1 [ \'a0 \'a03.828536] Installing knfsd (copyright (C) 1996 okir@monad.swb.de).
\f0 \

\f1 [ \'a0 \'a03.839265] SELinux: initialized (dev nfsd, type nfsd), uses genfs_contexts
\f0 \

\f1 [ \'a0 \'a03.949670] piix4_smbus 0000:00:01.3: SMBus base address uninitialized - upgrade BIOS or use force_addr=0xaddr
\f0 \

\f1 [ \'a0 \'a04.082323] input: PC Speaker as /devices/platform/pcspkr/input/input4
\f0 \

\f1 [ \'a0 \'a04.191443] type=1305 audit(1443204264.317:4): audit_pid=546 old=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:auditd_t:s0 res=1
\f0 \

\f1 [ \'a0 \'a04.277258] ppdev: user-space parallel port driver
\f0 \

\f1 [ \'a0 \'a04.459507] Adding 2097148k swap on /root/swap. \'a0Priority:-1 extents:2 across:3037200k SSFS
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Create a Simple Playbook 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. While logged into your control server, create a directory called 'Playbooks' and create an empty file in it called 'deploy_DATE.yml'. Replace DATE with today's date.\
2. Edit the 'deploy_DATE.yml' file and create a structure that will run the following against ONE of the groups in your host configuration:\
\'a0 - Using the package installation module, install lynx package\
\'a0 - Using the package installation module, determine if the telnet package is installed\
3. Run the playbook and display the results.\
4. Edit the playbook in Step #2 and create a new section for a DIFFERENT group in your host configuration as follows:\
\'a0 - Using the package installation module, install the telnet package\
\'a0 - Using the package installation module, determine if the lynx package is installed\
5. Run the full playbook and display the results.\
6. Tail the last lines of the ansible log file and compare to the results in Step #5.\'a0\
Solution\
\pard\pardeftab720\sl280\partightenfactor0
\cf0 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. While logged into your control server, create a directory called 'Playbooks' and create an empty file in it called 'deploy_DATE.yml'. Replace DATE with today's date.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ mkdir Playbooks
\f0 \

\f1 [test@tcox3 ~]$ cd Playbooks\'a0
\f0 \

\f1 [test@tcox3 ~]$ touch deploy_09242015.yml
\f0 \
\'a0\
2. Edit the 'deploy_DATE.yml' file and create a structure that will run the following against ONE of the groups in your host configuration:\
\'a0 - Using the package installation module, install lynx package\
\'a0 - Using the package installation module, determine if the telnet package is installed\

\f1 CONTENT SHOULD LOOK SOMETHING LIKE:
\f0 \

\f1 - hosts: appserver
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install Lynx on App Servers
\f0 \

\f1 \'a0 \'a0 yum: pkg=lynx state=installed update_cache=true
\f0 \

\f1 \'a0 - name: Querying for Telnet Install
\f0 \

\f1 \'a0 \'a0 yum: pkg=telnet state=present update_cache=true
\f0 \
\'a0\
3. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook -s deploy_09242015.yml
\f0 \
\'a0\

\f1 PLAY [appserver] **************************************************************
\f0 \
\'a0\

\f1 GATHERING FACTS ***************************************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Install Lynx on App Servers] *******************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Querying for Telnet Install] *******************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox5.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
4. Edit the playbook in Step #2 and create a new section for a DIFFERENT group in your host configuration as follows:\
\'a0 - Using the package installation module, install the telnet package\
\'a0 - Using the package installation module, determine if the lynx package is installed\

\f1 FULL FILE SHOULD NOW LOOK SOMETHING LIKE:
\f0 \

\f1 - hosts: appserver
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install Lynx on App Servers
\f0 \

\f1 \'a0 \'a0 yum: pkg=lynx state=installed update_cache=true
\f0 \

\f1 \'a0 - name: Querying for Telnet Install
\f0 \

\f1 \'a0 \'a0 yum: pkg=telnet state=present update_cache=true
\f0 \
\'a0\

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install Lynx on Web Servers
\f0 \

\f1 \'a0 \'a0 yum: pkg=telnet state=installed update_cache=true
\f0 \

\f1 \'a0 - name: Querying for Lynx Install
\f0 \

\f1 \'a0 \'a0 yum: pkg=lynx state=present update_cache=true
\f0 \
\'a0\
5. Run the full playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook -s deploy_09242015.yml
\f0 \
\'a0\

\f1 PLAY [appserver] **************************************************************
\f0 \
\'a0\

\f1 GATHERING FACTS ***************************************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Install Lynx on App Servers] *******************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Querying for Telnet Install] *******************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 GATHERING FACTS ***************************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Install Lynx on Web Servers] *******************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Querying for Lynx Install] *********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 tcox5.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
6. Tail the last lines of the ansible log file and compare to the results in Step #5.\'a0\

\f1 [test@tcox3 Playbooks]$ tail /var/log/ansible.log
\f0 \

\f1 2015-09-25 18:25:43,538 p=1682 u=test |
\f0 \

\f1 2015-09-25 18:25:43,569 p=1682 u=test | \'a0PLAY [appserver] **************************************************************
\f0 \

\f1 2015-09-25 18:25:43,569 p=1682 u=test | \'a0GATHERING FACTS ***************************************************************
\f0 \

\f1 2015-09-25 18:25:43,782 p=1682 u=test | \'a0ok: [tcox5.mylabserver.com]
\f0 \

\f1 2015-09-25 18:25:43,783 p=1682 u=test | \'a0TASK: [Install Lynx on App Servers] *******************************************
\f0 \

\f1 2015-09-25 18:25:47,166 p=1682 u=test | \'a0ok: [tcox5.mylabserver.com]
\f0 \

\f1 2015-09-25 18:25:47,166 p=1682 u=test | \'a0TASK: [Querying for Telnet Install] *******************************************
\f0 \

\f1 2015-09-25 18:25:51,595 p=1682 u=test | \'a0ok: [tcox5.mylabserver.com]
\f0 \

\f1 2015-09-25 18:25:51,596 p=1682 u=test | \'a0PLAY RECAP ********************************************************************
\f0 \

\f1 2015-09-25 18:25:51,596 p=1682 u=test | \'a0tcox5.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Building a Larger Playbook - Variable Section 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Run the appropriate ansible command to list all the hosts that are configured on your system for access by the control server. Display the ansible 'hosts' file in active use on the control server so that the hosts and groups are displayed.\
2. Create a directory called 'conf'. Change to that directory and create two files, one called 'copyright.yml' and one called 'webdefaults.yml'. In the copyright file, create variables called 'message' and 'author' containing appropriate text of your choice. In the webdefaults file, create two variables called 'apache_version' and 'apache_mod_req' with values of your choice. Display the files.\
3. Change back to the 'Playbooks' directory and edit your 'myfirstplaybook.yml' file. Create a variables section that contains a local variable called 'playbook_version' and set it to a value appropriate to your desires. Display the file and then run the playbook.\
4. Edit the 'myfirstplaybook.yml' file and create another variables section that appropriately imports the external files that we created in Step #2. Display the newly edited file.\
5. Run the ansible playbook just edited and note the results.\
\'a0\
Solution\
1. Run the appropriate ansible command to list all the hosts that are configured on your system for access by the control server. Display the ansible 'hosts' file in active use on the control server so that the hosts and groups are displayed.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \

\f1 [test@tcox3 ~]$ cat /etc/ansible/hosts
\f0 \

\f1 [local]
\f0 \

\f1 localhost
\f0 \

\f1 [apacheweb]
\f0 \

\f1 tcox4.mylabserver.com
\f0 \

\f1 [appserver]
\f0 \

\f1 tcox5.mylabserver.com
\f0 \
\'a0\
2. Create a directory called 'conf'. Change to that directory and create two files, one called 'copyright.yml' and one called 'webdefaults.yml'. In the copyright file, create variables called 'message' and 'author' containing appropriate text of your choice. In the webdefaults file, create two variables called 'apache_version' and 'apache_mod_req' with values of your choice. Display the files.\

\f1 [test@tcox3 Playbooks]$ mkdir conf
\f0 \

\f1 [test@tcox3 Playbooks]$ cd conf
\f0 \

\f1 [test@tcox3 conf]$ cat
\f0 \

\f1 copyright.yml \'a0 \'a0webdefaults.yml
\f0 \

\f1 [test@tcox3 conf]$ cat copyright.yml
\f0 \

\f1 ---
\f0 \

\f1 message: Copyright 2015 by Linux Academy
\f0 \

\f1 author: Linux Academy
\f0 \

\f1 [test@tcox3 conf]$ cat webdefaults.yml
\f0 \

\f1 ---
\f0 \

\f1 apache_version: 2.6
\f0 \

\f1 apache_mod_req: mod_ss
\f0 l\
\'a0\
3. Change back to the 'Playbooks' directory and edit your 'myfirstplaybook.yml' file. Create a variables section that contains a local variable called 'playbook_version' and set it to a value appropriate to your desires. Display the file and then run the playbook.\

\f1 [test@tcox3 Playbooks]$ vim myfirstplaybook.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat myfirstplaybook.yml
\f0 \

\f1 --- # My First YAML Playbook for Ansible
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 vars:
\f0 \

\f1 \'a0 \'a0 playbook_version: 0.1b
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ansible-playbook myfirstplaybook.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \
\'a0\
4. Edit the 'myfirstplaybook.yml' file and create another variables section that appropriately imports the external files that we created in Step #2. Display the newly edited file.\

\f1 [test@tcox3 Playbooks]$ vim myfirstplaybook.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat myfirstplaybook.yml
\f0 \

\f1 --- # My First YAML Playbook for Ansible
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 vars:
\f0 \

\f1 \'a0 \'a0 playbook_version: 0.1b
\f0 \

\f1 \'a0 vars_files:
\f0 \

\f1 \'a0 \'a0 - conf/copyright.yml
\f0 \

\f1 \'a0 \'a0 - conf/webdefaults.yml
\f0 \
\'a0\
5. Run the ansible playbook just edited and note the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook myfirstplaybook.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Building a Larger Playbook - Task Section\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Run the appropriate ansible command to list all the hosts that are configured on your system for access by the control server. Display the ansible 'hosts' file in active use on the control server so that the hosts and groups are displayed.\
2. Edit the previously created 'myfirstplaybook.yml' file from our previous exercises. Create a task section that uses the 'yum' module to install the apache web server on the host(s) indicated in the playbook. Display the file after editing.\
3. Run the playbook, after the initial installation of apache, run the playbook a second time to note the differing output.\
4. Add another task to the playbook that uses the 'yum' module to check and see if the 'lynx' package is installed and then display that file.\
5. Run the playbook and display the results.\
Solution\
\pard\pardeftab720\sl280\partightenfactor0
\cf0 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Run the appropriate ansible command to list all the hosts that are configured on your system for access by the control server. Display the ansible 'hosts' file in active use on the control server so that the hosts and groups are displayed.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \

\f1 [test@tcox3 ~]$ cat /etc/ansible/hosts
\f0 \

\f1 [local]
\f0 \

\f1 localhost
\f0 \

\f1 [apacheweb]
\f0 \

\f1 tcox4.mylabserver.com
\f0 \

\f1 [appserver]
\f0 \

\f1 tcox5.mylabserver.com
\f0 \
\'a0\
2. Edit the previously created 'myfirstplaybook.yml' file from our previous exercises. Create a task section that uses the 'yum' module to install the apache web server on the host(s) indicated in the playbook. Display the file after editing.\

\f1 [test@tcox3 Playbooks]$ vim myfirstplaybook.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat myfirstplaybook.yml
\f0 \

\f1 --- # My First YAML Playbook for Ansible
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 vars:
\f0 \

\f1 \'a0 \'a0 playbook_version: 0.1b
\f0 \

\f1 \'a0 vars_files:
\f0 \

\f1 \'a0 \'a0 - conf/copyright.yml
\f0 \

\f1 \'a0 \'a0 - conf/webdefaults.yml
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install Apache Web Server
\f0 \

\f1 \'a0 \'a0 \'a0 action: yum name=httpd state=installed
\f0 \
\'a0\
3. Run the playbook, after the initial installation of apache, run the playbook a second time to note the differing output.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook myfirstplaybook.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install Apache Web Server] *********************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ansible-playbook myfirstplaybook.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install Apache Web Server] *********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
4. Add another task to the playbook that uses the 'yum' module to check and see if the 'lynx' package is installed and then display that file.\

\f1 [test@tcox3 Playbooks]$ vim myfirstplaybook.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat myfirstplaybook.yml
\f0 \

\f1 --- # My First YAML Playbook for Ansible
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 vars:
\f0 \

\f1 \'a0 \'a0 playbook_version: 0.1b
\f0 \

\f1 \'a0 vars_files:
\f0 \

\f1 \'a0 \'a0 - conf/copyright.yml
\f0 \

\f1 \'a0 \'a0 - conf/webdefaults.yml
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install Apache Web Server
\f0 \

\f1 \'a0 \'a0 \'a0 action: yum name=httpd state=installed
\f0 \

\f1 \'a0 \'a0 - name: Verify the Lynx Web Browser
\f0 \

\f1 \'a0 \'a0 \'a0 action: yum name=lynx state=present
\f0 \
\'a0\
5. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook myfirstplaybook.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install Apache Web Server] *********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Verify the Lynx Web Browser] *******************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Loops 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the concepts discussed in the LOOP video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Defines a list of users within the playbook, using the 'user' module, iterates through that list of users, adding them all to the remote system\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the\'a0concepts discussed in the LOOP video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Defines a list of users within the playbook, using the 'user' module, iterates through that list of users, adding them all to the remote system\

\f1 [test@tcox3 Playbooks]$ vim loop.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat loop.yml
\f0 \

\f1 --- # LOOP Playbook Example
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Add a list of users
\f0 \

\f1 \'a0 \'a0 \'a0 user: name=\{\{ item \}\} state=present
\f0 \

\f1 \'a0 \'a0 \'a0 with_items:
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 - user1
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 - user2
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 - user3
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook loop.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Add a list of users] ***************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com] => (item=user1)
\f0 \

\f1 ok: [tcox4.mylabserver.com] => (item=user2)
\f0 \

\f1 ok: [tcox4.mylabserver.com] => (item=user3)
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ssh tcox4
\f0 \

\f1 Last login: Wed Oct 14 15:22:34 2015 from ec2-52-91-231-138.compute-1.amazonaws.com
\f0 \

\f1 [test@tcox4 ~]$ cat /etc/passwd| grep user
\f0 \

\f1 user1:x:1005:1005::/home/user1:/bin/bash
\f0 \

\f1 user2:x:1006:1006::/home/user2:/bin/bash
\f0 \

\f1 user3:x:1007:1007::/home/user3:/bin/bash
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Notify 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'NOTIFY' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Apache Web Server' using the appropriate package module\
- Upon installation of the web server, notifies the appropriately titled handler to restart the service using the 'service' module\
4. Run the playbook and display the results.\
Solution\
\pard\pardeftab720\sl280\partightenfactor0
\cf0 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'NOTIFY'\'a0concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Apache Web Server' using the appropriate package module\
- Upon installation of the web server, notifies the appropriately titled handler to restart the service using the 'service' module\

\f1 [test@tcox3 Playbooks]$ vim notify.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat notify.yml
\f0 \

\f1 --- # My First YAML Playbook for Ansible
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install Apache Web Server
\f0 \

\f1 \'a0 \'a0 \'a0 action: yum name=httpd state=installed
\f0 \

\f1 \'a0 \'a0 \'a0 notify: Restart HTTPD
\f0 \

\f1 \'a0 handlers:
\f0 \

\f1 \'a0 \'a0 - name: Restart HTTPD
\f0 \

\f1 \'a0 \'a0 \'a0 action: service name=httpd state=restarted
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook notify.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install Apache Web Server] *********************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 NOTIFIED: [Restart HTTPD] *****************************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=2 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ssh tcox4
\f0 \

\f1 Last login: Wed Oct 14 15:27:43 2015 from ec2-52-91-231-138.compute-1.amazonaws.com
\f0 \

\f1 [test@tcox4 ~]$ ps aux | grep http
\f0 \

\f1 root \'a0 \'a0 \'a02042 \'a00.0 \'a00.4 213080 \'a04752 ? \'a0 \'a0 \'a0 \'a0Ss \'a0 15:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02043 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02044 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02045 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02046 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02047 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 test \'a0 \'a0 \'a02077 \'a00.0 \'a00.0 112640 \'a0 964 pts/0 \'a0 \'a0R+ \'a0 15:28 \'a0 0:00 grep --color=auto http
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Conditionals\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'WHEN' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Gathers remote facts\
-\'a0Installs the 'Apache Web Server' using the appropriate package module\
- Each section will determine WHICH Apache package to install based on the value of the fact called 'ansible_os_family' and using the appropriate module for package management\
4. Run the playbook and display the results.\
\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
\'a0\
3. Create a playbook, using the 'WHEN' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Gathers remote facts\
-\'a0Installs the 'Apache Web Server' using the appropriate package module\
- Each section will determine WHICH Apache package to install based on the value of the fact called 'ansible_os_family' and using the appropriate module for package management\

\f1 [test@tcox3 Playbooks]$ vim when.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat when.yml 
\f0 \uc0\u8232 
\f1 --- # WHEN Playbook Example
\f0 \uc0\u8232 
\f1 - hosts: aptserver
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 vars:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 playbook_type: conditionalexample
\f0 \uc0\u8232 
\f1 \'a0 vars_files:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - conf/copyright.yml
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - conf/webdefaults.yml
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: Install Apache Appropriate to the Distribution Type (Debian/Ubuntu)
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 command: apt-get -y install apache2
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 when: ansible_os_family == "Debian"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: Install Apache Appropriate to the Distribution Type (RedHat/CentOS)
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 command: yum -y install httpd
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 when: ansible_os_family == "RedHat"
\f0 \
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook when.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [aptserver] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 GATHERING FACTS *************************************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox1.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Install Apache Appropriate to the Distribution Type (Debian/Ubuntu)] *** 
\f0 \uc0\u8232 
\f1 changed: [tcox1.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Install Apache Appropriate to the Distribution Type (RedHat/CentOS)] *** 
\f0 \uc0\u8232 
\f1 skipping: [tcox1.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox1.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=1\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Lookup 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'LOOKUP' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Display a JSON formatted debug message that will show the remote environment HOME variable\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'LOOKUP' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Display a JSON formatted debug message that will show the remote environment HOME variable\

\f1 [test@tcox3 Playbooks]$ vim lookup.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat lookup.yml 
\f0 \uc0\u8232 
\f1 --- # LOOKUP PLAYBOOK EXAMPLE
\f0 \uc0\u8232 
\f1 - hosts: apacheweb
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - debug: msg="\{\{ lookup('env','HOME') \}\} is the value listed"
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook lookup.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [apacheweb] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug msg="/home/test is the value listed"] **************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "msg": "/home/test is the value listed"
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox4.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=1\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Local Action\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'LOCAL ACTION' concepts from the video:\
- Uses local connection\
- Logs in to the remote system as 'test' user\
- Connects to the localhost\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Telnet Client' using the appropriate package module\
4. Run the playbook and display the results.\
Solution\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://linuxacademy.com/cp/exercises/view/id/212/module/59#/"}}{\fldrslt \cf2 \ul \ulc2 Solution}} \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'LOCAL ACTION' concepts from the video:\
- Uses local connection\
- Logs in to the remote system as 'test' user\
- Connects to the localhost\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Telnet Client' using the appropriate package module\

\f1 [test@tcox3 Playbooks]$ vim local.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat local.yml 
\f0 \uc0\u8232 
\f1 --- # LOCAL ACTION PLAYBOOK
\f0 \uc0\u8232 
\f1 - hosts: 127.0.0.1
\f0 \uc0\u8232 
\f1 \'a0 connection: local
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: Install Telnet Client
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 yum: pkg=telnet state=latest
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook local.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [127.0.0.1] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 GATHERING FACTS *************************************************************** 
\f0 \uc0\u8232 
\f1 ok: [127.0.0.1]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Install Telnet Client] ************************************************* 
\f0 \uc0\u8232 
\f1 ok: [127.0.0.1]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 127.0.0.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Lookup\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'LOOKUP' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Display a JSON formatted debug message that will show the remote environment HOME variable\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'LOOKUP' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Display a JSON formatted debug message that will show the remote environment HOME variable\

\f1 [test@tcox3 Playbooks]$ vim lookup.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat lookup.yml 
\f0 \uc0\u8232 
\f1 --- # LOOKUP PLAYBOOK EXAMPLE
\f0 \uc0\u8232 
\f1 - hosts: apacheweb
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - debug: msg="\{\{ lookup('env','HOME') \}\} is the value listed"
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook lookup.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [apacheweb] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug msg="/home/test is the value listed"] **************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "msg": "/home/test is the value listed"
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox4.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=1\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Local Action\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'LOCAL ACTION' concepts from the video:\
- Uses local connection\
- Logs in to the remote system as 'test' user\
- Connects to the localhost\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Telnet Client' using the appropriate package module\
4. Run the playbook and display the results.\
\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'LOCAL ACTION' concepts from the video:\
- Uses local connection\
- Logs in to the remote system as 'test' user\
- Connects to the localhost\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Telnet Client' using the appropriate package module\

\f1 [test@tcox3 Playbooks]$ vim local.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat local.yml 
\f0 \uc0\u8232 
\f1 --- # LOCAL ACTION PLAYBOOK
\f0 \uc0\u8232 
\f1 - hosts: 127.0.0.1
\f0 \uc0\u8232 
\f1 \'a0 connection: local
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: Install Telnet Client
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 yum: pkg=telnet state=latest
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook local.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [127.0.0.1] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 GATHERING FACTS *************************************************************** 
\f0 \uc0\u8232 
\f1 ok: [127.0.0.1]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Install Telnet Client] ************************************************* 
\f0 \uc0\u8232 
\f1 ok: [127.0.0.1]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 127.0.0.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Run Once\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'RUN ONCE' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Runs the remote 'uptime' command and logs it to the remote /home/test directory in a file called 'uptime.log'\
- List the remote /var directory and pipe the output to the /home/test directory in a file called 'dir.list'\
- Indicate that the directory listing command should only be run ONCE on the first host and not again\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'RUN ONCE' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Runs the remote 'uptime' command and logs it to the remote /home/test directory in a file called 'uptime.log'\
- List the remote /var directory and pipe the output to the /home/test directory in a file called 'dir.list'\
- Indicate that the directory listing command should only be run ONCE on the first host and not again\

\f1 [test@tcox3 Playbooks]$ vim runonce.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat runonce.yml 
\f0 \uc0\u8232 
\f1 --- # RUNONCE PLAYBOOK EXAMPLE
\f0 \uc0\u8232 
\f1 - hosts: all
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: Run the uptime command on all hosts and log it
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 raw: /usr/bin/uptime >> /home/test/uptime.log
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: List the /var directory and log it
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 raw: ls -al /var >> /home/test/dir.list
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 run_once: true
\f0 \
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook runonce.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [all] ******************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Run the uptime command on all hosts and log it] ************************ 
\f0 \uc0\u8232 
\f1 ok: [localhost]
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 
\f1 ok: [tcox5.mylabserver.com]
\f0 \uc0\u8232 
\f1 ok: [tcox1.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [List the /var directory and log it] ************************************ 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 localhost\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0\'a0\'a0 
\f0 \uc0\u8232 
\f1 tcox1.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0\'a0\'a0 
\f0 \uc0\u8232 
\f1 tcox4.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0\'a0\'a0 
\f0 \uc0\u8232 
\f1 tcox5.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Prompt\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'PROMPT' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Creates a local variable called 'playbook_version' and assigns some value\
- Prompts the playbook user for a package to install, defaulting to the telnet package if nothing is entered. This command should echo the typed output to the console.\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'PROMPT' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Creates a local variable called 'playbook_version' and assigns some value\
- Prompts the playbook user for a package to install, defaulting to the telnet package if nothing is entered. This command should echo the typed output to the console.\

\f1 [test@tcox3 Playbooks]$ vim prompt.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat prompt.yml
\f0 \

\f1 --- # PROMPT FOR USER PACKAGE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 vars:
\f0 \

\f1 \'a0 \'a0 playbook_version: 0.01b
\f0 \

\f1 \'a0 vars_prompt:
\f0 \

\f1 \'a0 \'a0 - name: pkgtoinstall
\f0 \

\f1 \'a0 \'a0 \'a0 prompt: Install Which Package?
\f0 \

\f1 \'a0 \'a0 \'a0 default: telnet
\f0 \

\f1 \'a0 \'a0 \'a0 private: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install the indicated package
\f0 \

\f1 \'a0 \'a0 \'a0 yum: pkg=\{\{ pkgtoinstall \}\} state=latest
\f0 \
\'a0\
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook prompt.yml
\f0 \

\f1 Install Which Package? [telnet]: lynx
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install the indicated package] *****************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Includes 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'INCLUDE' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Create a file in a directory called 'plays', this file should contain the single task to install the telnet package\
- Include that file in your playbook as a task that will result in the play in the file in the step above being run\
- Using the 'raw' module, verify the telnet package was installed and write the results to the remote server /home/test directory in a file called 'pkgs.log'\
4. Run the playbook and display the results.\
\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'INCLUDE' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Create a file in a directory called 'plays', this file should contain the single task to install the telnet package\
- Include that file in your playbook as a task that will result in the play in the file in the step above being run\
- Using the 'raw' module, verify the telnet package was installed and write the results to the remote server /home/test directory in a file called 'pkgs.log'\

\f1 [test@tcox3 Playbooks]$ vim include.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat include.yml
\f0 \

\f1 --- # FULL INCLUDE TASKS EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - include: plays/packages.yml
\f0 \

\f1 \'a0 \'a0 - name: Verify the telnet package is installed
\f0 \

\f1 \'a0 \'a0 \'a0 raw: yum list installed | grep telnet > /home/test/pkgs.log
\f0 \
\'a0\
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook include.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install the telnet client] *********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Install the Lynx web browser] ******************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Verify the telnet package is installed] ********************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ssh tcox4
\f0 \

\f1 Last login: Tue Oct 27 13:25:23 2015 from ec2-52-23-228-15.compute-1.amazonaws.com
\f0 \

\f1 [test@tcox4 ~]$ ls -al pkgs.log
\f0 \

\f1 -rw-r--r--. 1 root root 81 Oct 27 13:25 pkgs.log
\f0 \

\f1 [test@tcox4 ~]$ cat pkgs.log
\f0 \

\f1 telnet.x86_64 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 1:0.17-59.el7 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0@base
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Tags 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'TAGS' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Using the 'yum' module, install the telnet and lynx packages. Tag that tasks with a label called 'packages'\
- Using the 'raw' module, verify that telnet is now installed on the remote server, write the results to the /home/test directory in a file called 'pkg.log'. Tag this task with a label called 'logging'\
4. Run the playbook and display the results. Run the playbook a second time and ONLY run the tag called 'packages'.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'TAGS' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Using the 'yum' module, install the telnet and lynx packages. Tag that tasks with a label called 'packages'\
- Using the 'raw' module, verify that telnet is now installed on the remote server, write the results to the /home/test directory in a file called 'pkg.log'. Tag this task with a label called 'logging'\

\f1 [test@tcox3 Playbooks]$ vim tags.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat tags.yml
\f0 \

\f1 --- # TAG FUNCTIONALITY EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install the telnet and lynx packages
\f0 \

\f1 \'a0 \'a0 \'a0 yum: pkg=\{\{ item \}\} state=latest
\f0 \

\f1 \'a0 \'a0 \'a0 with_items:
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 - telnet
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 - lynx
\f0 \

\f1 \'a0 \'a0 \'a0 tags:
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 - packages
\f0 \

\f1 \'a0 \'a0 - name: Verify that telnet was installed
\f0 \

\f1 \'a0 \'a0 \'a0 raw: yum list installed | grep telnet > /home/test/pkg.log
\f0 \

\f1 \'a0 \'a0 \'a0 tags:
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 - logging
\f0 \
\'a0\
\'a0\
4. Run the playbook and display the results. Run the playbook a second time and ONLY run the tag called 'packages'.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook tags.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install the telnet and lynx packages] **********************************
\f0 \

\f1 ok: [tcox4.mylabserver.com] => (item=telnet,lynx)
\f0 \
\'a0\

\f1 TASK: [Verify that telnet was installed] **************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ansible-playbook --tag "packages" tags.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install the telnet and lynx packages] **********************************
\f0 \

\f1 ok: [tcox4.mylabserver.com] => (item=telnet,lynx)
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Until\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'UNTIL' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Installs the Apache web server using the appropriate package management module\
- Runs a command to verify that the 'systemctl' status command shows the httpd service is running\
- Register the result of the above command, using the debug module to display the value captured during each iteration\
- This command should run FIVE times with a break of FIVE seconds between each try until the command succeeds OR the fifth loop indicates the service did not start\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
\'a0\
3. Create a playbook, using the 'UNTIL' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Installs the Apache web server using the appropriate package management module\
- Runs a command to verify that the 'systemctl' status command shows the httpd service is running\
- Register the result of the above command, using the debug module to display the value captured during each iteration\
- This command should run FIVE times with a break of FIVE seconds between each try until the command succeeds OR the fifth loop indicates the service did not start\

\f1 [test@tcox3 Playbooks]$ ansible-playbook until.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [apacheweb] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Installing Apache Web Server] ****************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Verify Service Status] ************************************************* 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=result] ****************************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "result": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "attempts": 3, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "changed": true, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "cmd": "systemctl status httpd", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "delta": "0:00:00.007014", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "end": "2015-11-02 23:34:29.364704", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "systemctl status httpd", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "shell"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "rc": 0, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "start": "2015-11-02 23:34:29.357690", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stderr": "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout": "httpd.service - The Apache HTTP Server\\n\'a0\'a0 Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled)\\n\'a0\'a0 Active: active (running) since Mon 2015-11-02 23:34:25 UTC; 4s ago\\n Main PID: 1701 (httpd)\\n\'a0\'a0 Status: \\"Processing requests...\\"\\n\'a0\'a0 CGroup: /system.slice/httpd.service\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1701 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1702 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1703 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1704 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1705 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 `-1706 /usr/sbin/httpd -DFOREGROUND\\n\\nNov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...\\nNov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server.", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout_lines": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "httpd.service - The Apache HTTP Server", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled)", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 Active: active (running) since Mon 2015-11-02 23:34:25 UTC; 4s ago", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 " Main PID: 1701 (httpd)", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 Status: \\"Processing requests...\\"", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 CGroup: /system.slice/httpd.service", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1701 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1702 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1703 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1704 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-1705 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 `-1706 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server."
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "warnings": []
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox4.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=3\'a0\'a0\'a0 changed=2\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\'a0\

\f1 HERE IS AN EXAMPLE OF WHAT YOUR PLAYBOOK COULD LOOK LIKE:
\f0 \

\f1 --- # UNTIL EXAMPLE 
\f0 \

\f1 - hosts: apacheweb 
\f0 \

\f1 \'a0 sudo: yes 
\f0 \

\f1 \'a0 connection: ssh 
\f0 \

\f1 \'a0 user: test 
\f0 \

\f1 \'a0 gather_facts: no 
\f0 \

\f1 tasks: 
\f0 \

\f1 - name: Installing Apache Web Server 
\f0 \

\f1 \'a0 yum: pkg=httpd state=latest 
\f0 \

\f1 - name: Verify Service Status 
\f0 \

\f1 \'a0 shell: systemctl status httpd 
\f0 \

\f1 \'a0 register: result 
\f0 \

\f1 \'a0 until: result.stdout.find(\'93active (running)\'94) != -1 
\f0 \

\f1 \'a0 retries: 5 
\f0 \

\f1 \'a0 delay: 5
\f0 \
- debug: var=result\
\'a0\
4. Run the playbook and display the results.\

\f1 See above for full output
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Ignore Errors\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'IGNORE_ERRORS' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to the server/group in Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Run a command on the remote server that will ALWAYS fail\
- Indicate that the playbook should continue to run even if errors are generated\
- Using the 'yum' module, install the telnet client AFTER the above command to show the playbook continues\
4. Run the playbook and display the results.\'a0\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'IGNORE_ERRORS' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to the server/group in Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Run a command on the remote server that will ALWAYS fail\
- Indicate that the playbook should continue to run even if errors are generated\
- Using the 'yum' module, install the telnet client AFTER the above command to show the playbook continues\

\f1 [test@tcox3 Playbooks]$ vim failure.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat failure.yml
\f0 \

\f1 --- # ERROR HANDLING EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Execute a command that will fail
\f0 \

\f1 \'a0 \'a0 \'a0 command: /bin/false
\f0 \

\f1 \'a0 \'a0 \'a0 ignore_errors: yes
\f0 \

\f1 \'a0 \'a0 - name: Install telnet
\f0 \

\f1 \'a0 \'a0 \'a0 yum: pkg=telnet state=latest
\f0 \
\'a0\
\'a0\
4. Run the playbook and display the results.\'a0\

\f1 [test@tcox3 Playbooks]$ ansible-playbook failure.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Execute a command that will fail] **************************************
\f0 \

\f1 failed: [tcox4.mylabserver.com] => \{"changed": true, "cmd": ["/bin/false"], "delta": "0:00:00.001857", "end": "2015-10-28 17:54:49.571966", "rc": 1, "start": "2015-10-28 17:54:49.570109", "warnings": []\}
\f0 \

\f1 ...ignoring
\f0 \
\'a0\

\f1 TASK: [Install telnet] ********************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Discrete Plays\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'INCLUDE' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Create a directory called 'plays'. Create a YAML file that runs a task to install one or more packages using the 'yum' module\
- Include that file in the playbook so that the created YAML file in the 'plays' directory above runs in the 'tasks' section\
- After the included tasks run, verify that the package is installed remotely using the 'raw' module, log the output to a file called 'pkgs.log' in remote /home/test\
4. Run the playbook and display the results.\'a0\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'INCLUDE' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to ALL servers\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Create a directory called 'plays'. Create a YAML file that runs a task to install one or more packages using the 'yum' module\
- Include that file in the playbook so that the created YAML file in the 'plays' directory above runs in the 'tasks' section\
- After the included tasks run, verify that the package is installed remotely using the 'raw' module, log the output to a file called 'pkgs.log' in remote /home/test\

\f1 [test@tcox3 Playbooks]$ vim include.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat include.yml
\f0 \

\f1 --- # FULL INCLUDE TASKS EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - include: plays/packages.yml
\f0 \

\f1 \'a0 \'a0 - name: Verify the telnet package is installed
\f0 \

\f1 \'a0 \'a0 \'a0 raw: yum list installed | grep telnet > /home/test/pkgs.log
\f0 \
\'a0\
\'a0\
4. Run the playbook and display the results.\'a0\

\f1 [test@tcox3 Playbooks]$ ansible-playbook include.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install the telnet client] *********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Install the Lynx web browser] ******************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Verify the telnet package is installed] ********************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Create an Outline\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create an outline for a playbook that lists the following (name it 'webserver.txt'):\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to web servers\
- The playbook runs as 'sudo'\
- Indicate to capture a pre-task timestamp\
- Install the apache web server, telnet client and lynx web browser\
- Capture a log of all installed packages on the system\
- Indicate to capture a post-task timestamp\
\'a0\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
\'a0\
3. Create an outline for a playbook that lists the following (name it 'webserver.txt'):\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to web servers\
- The playbook runs as 'sudo'\
- Indicate to capture a pre-task timestamp\
- Install the apache web server, telnet client and lynx web browser\
- Capture a log of all installed packages on the system\
- Indicate to capture a post-task timestamp\

\f1 [test@tcox3 Outline]$ vim webserver.txt 
\f0 \uc0\u8232 
\f1 [test@tcox3 Outline]$ cat webserver.txt 
\f0 \uc0\u8232 
\f1 - webservers
\f0 \uc0\u8232 
\f1 - test user
\f0 \uc0\u8232 
\f1 - sudo rights
\f0 \uc0\u8232 \u8232 
\f1 - date/time stamp for when the playbook start
\f0 \uc0\u8232 \u8232 
\f1 - install the apache web server
\f0 \uc0\u8232 
\f1 - start the web service
\f0 \uc0\u8232 \u8232 
\f1 - verify that the web service is running
\f0 \uc0\u8232 \u8232 
\f1 - install client software
\f0 \uc0\u8232 
\f1 \'a0 - telnet
\f0 \uc0\u8232 
\f1 \'a0 - lynx
\f0 \uc0\u8232 \u8232 
\f1 - log all the packages install on the system
\f0 \uc0\u8232 \u8232 
\f1 - date/time stamp for when the playbook ends
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Create Playbook from Outline 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the the 'outline' created in our previous exercise\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the the 'outline' created in our previous exercise\

\f1 test@tcox3 Outline]$ vim webserver.original 
\f0 \uc0\u8232 
\f1 [test@tcox3 Outline]$ cat webserver.original 
\f0 \uc0\u8232 
\f1 --- # Outline to Playbook Translation
\f0 \uc0\u8232 
\f1 - hosts: apacheweb
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0 - name: date/time stamp for when the playbook starts
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 raw: /usr/bin/date > /home/test/playbook_start.log
\f0 \uc0\u8232 
\f1 \'a0 - name: install the apache web server
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=httpd state=latest
\f0 \uc0\u8232 
\f1 \'a0 - name: start the web service
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 service: name=httpd state=restarted
\f0 \uc0\u8232 
\f1 \'a0 - name: verify that the web service is running
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: systemctl status httpd
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: result
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=result
\f0 \uc0\u8232 
\f1 \'a0 - name: install client software - telnet
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=telnet state=latest
\f0 \uc0\u8232 
\f1 \'a0 - name: install client software - lynx
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=lynx state=latest
\f0 \uc0\u8232 
\f1 \'a0 - name: log all the packages install on the system
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 raw: yum list installed > /home/test/installed.log
\f0 \uc0\u8232 
\f1 \'a0 - name: date/time stamp for when the playbook ends
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 raw: /usr/bin/date > /home/test/playbook_end.log
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Outline]$ ansible-playbook webserver.original 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [apacheweb] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [date/time stamp for when the playbook starts] ************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install the apache web server] ***************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [start the web service] ************************************************* 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [verify that the web service is running] ******************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=result] ****************************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "result": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "changed": true, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "cmd": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "systemctl", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "status", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "httpd"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "delta": "0:00:00.008202", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "end": "2015-11-02 23:51:52.712205", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "systemctl status httpd", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "rc": 0, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "start": "2015-11-02 23:51:52.704003", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stderr": "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout": "httpd.service - The Apache HTTP Server\\n\'a0\'a0 Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled)\\n\'a0\'a0 Active: active (running) since Mon 2015-11-02 23:51:52 UTC; 176ms ago\\n Main PID: 2019 (httpd)\\n\'a0\'a0 Status: \\"Processing requests...\\"\\n\'a0\'a0 CGroup: /system.slice/httpd.service\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2019 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2020 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2021 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2022 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2023 /usr/sbin/httpd -DFOREGROUND\\n\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 `-2024 /usr/sbin/httpd -DFOREGROUND\\n\\nNov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...\\nNov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server.", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout_lines": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "httpd.service - The Apache HTTP Server", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled)", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 Active: active (running) since Mon 2015-11-02 23:51:52 UTC; 176ms ago", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 " Main PID: 2019 (httpd)", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 Status: \\"Processing requests...\\"", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 CGroup: /system.slice/httpd.service", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2019 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2020 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2021 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2022 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 |-2023 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 `-2024 /usr/sbin/httpd -DFOREGROUND", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server."
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "warnings": []
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install client software - telnet] ************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install client software - lynx] **************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [log all the packages install on the system] **************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [date/time stamp for when the playbook ends] **************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox4.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=9\'a0\'a0\'a0 changed=5\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Optimize Your Outline Playbook\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Optimize the playbook created in our previous exercise such that:\
- Handlers are in the appropriate section\
- The 'raw' module is replaced by one of the other shell modules that allow us to 'register' the output for display\
- Register the result of any shell module output for local JSON display with debug statements\
4. Run the playbook and display the results.\
Solution \
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Optimize the playbook created in our previous exercise such that:\
- Handlers are in the appropriate section\
- The 'raw' module is replaced by one of the other shell modules that allow us to 'register' the output for display\
- Register the result of any shell module output for local JSON display with debug statements\

\f1 [test@tcox3 Outline]$ vim webserver.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Outline]$ cat webserver.yml 
\f0 \uc0\u8232 
\f1 --- # Outline to Playbook Translation
\f0 \uc0\u8232 
\f1 - hosts: apacheweb
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0 - name: date/time stamp for when the playbook starts
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: /usr/bin/date
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: timestamp_start
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=timestamp_start
\f0 \uc0\u8232 
\f1 \'a0 - name: install the apache web server
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=httpd state=latest
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 notify: Start HTTPD
\f0 \uc0\u8232 
\f1 \'a0 - name: verify that the web service is running
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: systemctl status httpd
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: result
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 ignore_errors: yes
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=result
\f0 \uc0\u8232 
\f1 \'a0 - name: install client software - telnet
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=telnet state=latest
\f0 \uc0\u8232 
\f1 \'a0 - name: install client software - lynx
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=lynx state=latest
\f0 \uc0\u8232 
\f1 \'a0 - name: log all the packages install on the system
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: yum list installed
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: installed_result
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=installed_result
\f0 \uc0\u8232 
\f1 \'a0 - name: date/time stamp for when the playbook ends
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: /usr/bin/date
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: timestamp_end
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=timestamp_end
\f0 \uc0\u8232 
\f1 \'a0 handlers:
\f0 \uc0\u8232 
\f1 \'a0 - name: Start HTTPD
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 service: name=httpd state=restarted
\f0 \
4. Run the playbook and display the results.\

\f1 [test@tcox3 Outline]$ ansible-playbook webserver.yml
\f0 \uc0\u8232 \u8232 
\f1 PLAY [apacheweb] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [date/time stamp for when the playbook starts] ************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=timestamp_start] ********************************************* 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "timestamp_start": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "changed": true, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "cmd": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "/usr/bin/date"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "delta": "0:00:00.001476", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "end": "2015-11-02 23:55:34.125425", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "/usr/bin/date", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "rc": 0, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "start": "2015-11-02 23:55:34.123949", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stderr": "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout": "Mon Nov\'a0 2 23:55:34 UTC 2015", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout_lines": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Mon Nov\'a0 2 23:55:34 UTC 2015"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "warnings": []
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install the apache web server] ***************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [verify that the web service is running] ******************************** 
\f0 \uc0\u8232 
\f1 failed: [tcox4.mylabserver.com] => \{"changed": true, "cmd": ["systemctl", "status", "httpd"], "delta": "0:00:00.010313", "end": "2015-11-02 23:55:38.917295", "rc": 3, "start": "2015-11-02 23:55:38.906982", "warnings": []\}
\f0 \uc0\u8232 
\f1 stdout: httpd.service - The Apache HTTP Server
\f0 \uc0\u8232 
\f1 \'a0\'a0 Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled)
\f0 \uc0\u8232 
\f1 \'a0\'a0 Active: inactive (dead)
\f0 \uc0\u8232 \u8232 
\f1 Nov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...
\f0 \uc0\u8232 
\f1 Nov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server.
\f0 \uc0\u8232 
\f1 Nov 02 23:49:27 tcox4.mylabserver.com systemd[1]: Stopping The Apache HTTP Server...
\f0 \uc0\u8232 
\f1 Nov 02 23:49:28 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server.
\f0 \uc0\u8232 
\f1 Nov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server.
\f0 \uc0\u8232 
\f1 Nov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...
\f0 \uc0\u8232 
\f1 Nov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server.
\f0 \uc0\u8232 
\f1 Nov 02 23:55:23 tcox4.mylabserver.com systemd[1]: Stopping The Apache HTTP Server...
\f0 \uc0\u8232 
\f1 Nov 02 23:55:24 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server.
\f0 \uc0\u8232 
\f1 ...ignoring
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=result] ****************************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "result": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "changed": true, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "cmd": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "systemctl", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "status", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "httpd"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "delta": "0:00:00.010313", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "end": "2015-11-02 23:55:38.917295", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "systemctl status httpd", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "rc": 3, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "start": "2015-11-02 23:55:38.906982", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stderr": "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout": "httpd.service - The Apache HTTP Server\\n\'a0\'a0 Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled)\\n\'a0\'a0 Active: inactive (dead)\\n\\nNov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...\\nNov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server.\\nNov 02 23:49:27 tcox4.mylabserver.com systemd[1]: Stopping The Apache HTTP Server...\\nNov 02 23:49:28 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server.\\nNov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server.\\nNov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...\\nNov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server.\\nNov 02 23:55:23 tcox4.mylabserver.com systemd[1]: Stopping The Apache HTTP Server...\\nNov 02 23:55:24 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server.", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout_lines": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "httpd.service - The Apache HTTP Server", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled)", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "\'a0\'a0 Active: inactive (dead)", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:34:25 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server.", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:49:27 tcox4.mylabserver.com systemd[1]: Stopping The Apache HTTP Server...", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:49:28 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server.", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server.", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Starting The Apache HTTP Server...", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:51:52 tcox4.mylabserver.com systemd[1]: Started The Apache HTTP Server.", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:55:23 tcox4.mylabserver.com systemd[1]: Stopping The Apache HTTP Server...", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Nov 02 23:55:24 tcox4.mylabserver.com systemd[1]: Stopped The Apache HTTP Server."
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "warnings": []
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install client software - telnet] ************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install client software - lynx] **************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [log all the packages install on the system] **************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=installed_result] ******************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "installed_result": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "changed": true, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "cmd": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "yum", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "list", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "installed"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "delta": "0:00:00.333644", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "end": "2015-11-02 23:55:46.460731", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "yum list installed", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "rc": 0, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "start": "2015-11-02 23:55:46.127087", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stderr": "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout": "Loaded plugins: fastestmirror\\nInstalled Packages\\nGConf2.x86_64\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 3.2.6-8.el7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @base\'a0\'a0\'a0 \\nImageMagick.x86_64\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 6.7.8.9-10.el7 
\f0 \

\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 (((OUTPUT CONCATENATED FOR PACKAGE DISPLAY)))
\f0 \

\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "yum.noarch\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 3.4.3-125.el7.centos\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @base\'a0\'a0\'a0 ", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "yum-metadata-parser.x86_64\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 1.1.4-10.el7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 installed", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "yum-plugin-fastestmirror.noarch\'a0\'a0\'a0\'a0\'a0\'a0 1.1.31-29.el7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @base\'a0\'a0\'a0 ", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "yum-utils.noarch\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 1.1.31-29.el7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @base\'a0\'a0\'a0 ", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "zenity.x86_64\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 3.8.0-4.el7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 @base\'a0\'a0\'a0 ", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "zip.x86_64\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 3.0-10.el7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 installed", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "zlib.x86_64\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 1.2.7-13.el7\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 installed"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "warnings": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Consider using yum module rather than running yum"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ]
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 TASK: [date/time stamp for when the playbook ends] **************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=timestamp_end] *********************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "timestamp_end": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "changed": true, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "cmd": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "/usr/bin/date"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "delta": "0:00:00.002033", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "end": "2015-11-02 23:55:46.652791", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "/usr/bin/date", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "rc": 0, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "start": "2015-11-02 23:55:46.650758", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stderr": "", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout": "Mon Nov\'a0 2 23:55:46 UTC 2015", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "stdout_lines": [
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Mon Nov\'a0 2 23:55:46 UTC 2015"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ], 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "warnings": []
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 NOTIFIED: [Start HTTPD] ******************************************************* 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox4.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=12\'a0\'a0 changed=8\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Take Your Playbook for a DryRun\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the the 'outline' created in our previous exercise\
4. Run the playbook using the 'dry run' command and display the results\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the the 'outline' created in our previous exercise\

\f1 [test@tcox3 Outline]$ vim webserver.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Outline]$ cat webserver.yml 
\f0 \uc0\u8232 
\f1 --- # Outline to Playbook Translation
\f0 \uc0\u8232 
\f1 - hosts: apacheweb
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0 - name: date/time stamp for when the playbook starts
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: /usr/bin/date
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: timestamp_start
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=timestamp_start
\f0 \uc0\u8232 
\f1 \'a0 - name: install the apache web server
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=httpd state=latest
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 notify: Start HTTPD
\f0 \uc0\u8232 
\f1 \'a0 - name: verify that the web service is running
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: systemctl status httpd
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: result
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 ignore_errors: yes
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=result
\f0 \uc0\u8232 
\f1 \'a0 - name: install client software - telnet
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=telnet state=latest
\f0 \uc0\u8232 
\f1 \'a0 - name: install client software - lynx
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 yum: pkg=lynx state=latest
\f0 \uc0\u8232 
\f1 \'a0 - name: log all the packages install on the system
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: yum list installed
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: installed_result
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=installed_result
\f0 \uc0\u8232 
\f1 \'a0 - name: date/time stamp for when the playbook ends
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 command: /usr/bin/date
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 register: timestamp_end
\f0 \uc0\u8232 
\f1 \'a0 - debug: var=timestamp_end
\f0 \uc0\u8232 
\f1 \'a0 handlers:
\f0 \uc0\u8232 
\f1 \'a0 - name: Start HTTPD
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 service: name=httpd state=restarted
\f0 \
4. Run the playbook using the 'dry run' command and display the results\

\f1 [test@tcox3 Outline]$ ansible-playbook webserver.yml --check
\f0 \uc0\u8232 \u8232 
\f1 PLAY [apacheweb] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [date/time stamp for when the playbook starts] ************************** 
\f0 \uc0\u8232 
\f1 skipping: [tcox4.mylabserver.com]
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=timestamp_start] ********************************************* 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "timestamp_start": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "/usr/bin/date", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "msg": "check mode not supported for command", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "skipped": true
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install the apache web server] ***************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [verify that the web service is running] ******************************** 
\f0 \uc0\u8232 
\f1 skipping: [tcox4.mylabserver.com]
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=result] ****************************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "result": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "systemctl status httpd", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "msg": "check mode not supported for command", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "skipped": true
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install client software - telnet] ************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [install client software - lynx] **************************************** 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [log all the packages install on the system] **************************** 
\f0 \uc0\u8232 
\f1 skipping: [tcox4.mylabserver.com]
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=installed_result] ******************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "installed_result": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "yum list installed", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "msg": "check mode not supported for command", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "skipped": true
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 TASK: [date/time stamp for when the playbook ends] **************************** 
\f0 \uc0\u8232 
\f1 skipping: [tcox4.mylabserver.com]
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [debug var=timestamp_end] *********************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 "var": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 "timestamp_end": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "invocation": \{
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_args": "/usr/bin/date", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "module_name": "command"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}, 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "msg": "check mode not supported for command", 
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "skipped": true
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 \}
\f0 \uc0\u8232 
\f1 \}
\f0 \uc0\u8232 \u8232 
\f1 NOTIFIED: [Start HTTPD] ******************************************************* 
\f0 \uc0\u8232 
\f1 changed: [tcox4.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox4.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=8\'a0\'a0\'a0 changed=4\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Jinja2 Template Creation\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create an\'a0abitrary configuration file called test.conf.j2 that contains:\
- references to at least three variables that are passed in at the command line or from within a playbook\
- reference to one variable that can be gathered when remote facts are obtained\
- Display the result.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create an\'a0abitrary configuration file called test.conf.j2 that contains:\
- references to at least three variables that are passed in at the command line or from within a playbook\
- reference to one variable that can be gathered when remote facts are obtained\
- Display the result.\

\f1 [test@tcox3 files]$ vim test.conf.j2
\f0 \

\f1 [test@tcox3 files]$ cat test.conf.j2
\f0 \

\f1 # Configuration for our custom widget
\f0 \
\'a0\
\'a0\

\f1 \'a0 ConnectionType \{\{ connectionType \}\}
\f0 \
\'a0\
\'a0\
\'a0\

\f1 \'a0 Username \{\{ userName \}\}
\f0 \

\f1 \'a0 Password \{\{ userPassword \}\}
\f0 \
\'a0\
\'a0\
\'a0\

\f1 \'a0 DistributionType \{\{ ansible_os_family \}\}
\f0 \
\'a0\

\f1 NOTE THAT THIS IS ONE EXAMPLE, YOUR EXAMPLE CAN AND PROBABLY WILL VARY, THIS IS JUST AN EXAMPLE
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Using Templates 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'TEMPLATE' concepts from the video:\
- Uses local connection\
- Logs in to the remote system as 'test' user\
- Connects to the localhost\
- The playbook runs as 'sudo'\
- Sets variables that match those referenced in the previously created template file (see previous exercise)\
- Installs the template configuration file created earlier to the /home/test/test.conf file, setting user/group ownership to 'test' and the file permissions 750\
4. Run the playbook and display the results\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'TEMPLATE' concepts from the video:\
- Uses local connection\
- Logs in to the remote system as 'test' user\
- Connects to the localhost\
- The playbook runs as 'sudo'\
- Sets variables that match those referenced in the previously created template file (see previous exercise)\
- Installs the template configuration file created earlier to the /home/test/test.conf file, setting user/group ownership to 'test' and the file permissions 750\

\f1 [test@tcox3 files]$ vim test.yml
\f0 \

\f1 [test@tcox3 files]$ cat test.yml
\f0 \

\f1 --- # Testing the J2 Template Module
\f0 \

\f1 - hosts: apacheweb:debian
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 gather_facts: yes
\f0 \

\f1 \'a0 vars:
\f0 \

\f1 \'a0 \'a0 userName: test
\f0 \

\f1 \'a0 \'a0 userPassword: password123
\f0 \

\f1 \'a0 \'a0 connectionType: SFTP
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install the configuration file customized for the system
\f0 \

\f1 \'a0 \'a0 \'a0 template: src=test.conf.j2 dest=/home/test/test.conf owner=test group=test mode=750
\f0 \
\'a0\
4. Run the playbook and display the results\

\f1 [test@tcox3 files]$ ansible-playbook test.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb:debian] *******************************************************
\f0 \
\'a0\

\f1 GATHERING FACTS ***************************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Install the configuration file customized for the system] **************
\f0 \

\f1 changed: [tcox1.mylabserver.com]
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox1.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Start At\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'START AT' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Uses three separate, named, tasks to install three packages (your choice)\
4. Run the playbook, starting with the SECOND named task and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'START AT' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Uses three separate, named, tasks to install three packages (your choice)\

\f1 --- # START AT PLAYBOOK EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install Telnet
\f0 \

\f1 \'a0 \'a0 yum: pkg=telnet state=latest
\f0 \

\f1 \'a0 - name: Install Lynx
\f0 \

\f1 \'a0 \'a0 yum: pkg=lynx state=latest
\f0 \

\f1 \'a0 - name: Install at
\f0 \

\f1 \'a0 \'a0 yum: pkg=at state=latest
\f0 \
\'a0\
\'a0\
4. Run the playbook, starting with the SECOND named task and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook startat.yml --start-at="Install Lynx"
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install Lynx] **********************************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Install at] ************************************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=2 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Step Into\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'STEP INTO' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Uses three separate, named, tasks to install three packages (your choice)\
4. Run the playbook,\'a0indicating that you should be prompted for each task run.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'STEP INTO' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Uses three separate, named, tasks to install three packages (your choice)\

\f1 --- # START AT PLAYBOOK EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install Telnet
\f0 \

\f1 \'a0 \'a0 yum: pkg=telnet state=latest
\f0 \

\f1 \'a0 - name: Install Lynx
\f0 \

\f1 \'a0 \'a0 yum: pkg=lynx state=latest
\f0 \

\f1 \'a0 - name: Install at
\f0 \

\f1 \'a0 \'a0 yum: pkg=at state=latest
\f0 \
\'a0\
\'a0\
4. Run the playbook,\'a0indicating that you should be prompted for each task run.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook startat.yml --step
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \

\f1 Perform task: Install Telnet (y/n/c): y
\f0 \
\'a0\

\f1 Perform task: Install Telnet (y/n/c): \'a0****************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \

\f1 Perform task: Install Lynx (y/n/c): y
\f0 \
\'a0\

\f1 Perform task: Install Lynx (y/n/c): \'a0******************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \

\f1 Perform task: Install at (y/n/c): y
\f0 \
\'a0\

\f1 Perform task: Install at (y/n/c): \'a0********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - Variables from Command Line\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'Variables from Command Line' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as\'a0a VARIABLE user\
- Connects to one server or group\'a0passed in as a VARIABLE\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs a package passed in as a VARIABLE\
4. Run the playbook and display the results.\
\pard\pardeftab720\sl440\partightenfactor0
\cf0 \
Solution:\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'Variables from Command Line' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as\'a0a VARIABLE user\
- Connects to one server or group\'a0passed in as a VARIABLE\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs a package passed in as a VARIABLE\

\f1 [test@tcox3 Playbooks]$ vim fromcmdline.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat fromcmdline.yml
\f0 \

\f1 --- # VARIABLES AT A COMMAND LINE PASSING EXAMPLE
\f0 \

\f1 - hosts: '\{\{ hosts \}\}'
\f0 \

\f1 \'a0 user: '\{\{ user \}\}'
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install some software
\f0 \

\f1 \'a0 \'a0 yum: pkg=\{\{ pkg \}\} state=latest
\f0 \
\'a0\
\'a0\
4. Run the playbook and display the results\

\f1 [test@tcox3 Playbooks]$ ansible-playbook fromcmdline.yml --extra-vars "hosts=apacheweb user=test pkg=telnet"
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install some software] *************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf0 Exercise: Playbooks - DelegateTo\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'DELEGATE TO' concepts from the video:\
- Uses local connection\
- Logs in to the remote system as 'test' user\
- Connects to the localhost\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Telnet Client' using the appropriate package module\
4. Run the playbook and display the results.\
\pard\pardeftab720\sl440\partightenfactor0
\cf0 Solution:\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf0 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf0 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'DELEGATE TO' concepts from the video:\
- Uses local connection\
- Logs in to the remote system as 'test' user\
- Connects to the localhost\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Telnet Client' using the appropriate package module\

\f1 [test@tcox3 Playbooks]$ vim local.yml\'a0
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat local.yml\'a0
\f0 \uc0\u8232 
\f1 --- #\'a0DELEGATE TO PLAYBOOK
\f0 \uc0\u8232 
\f1 - hosts: 127.0.0.1
\f0 \uc0\u8232 
\f1 \'a0\'a0user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: Install Telnet Client
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 yum: pkg=telnet state=latest
\f0 \

\f1 \'a0 \'a0 \'a0 delegate_to: 127.0.0.1
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook local.yml\'a0
\f0 \uc0\u8232 \u8232 
\f1 PLAY [127.0.0.1] **************************************************************\'a0
\f0 \uc0\u8232 \u8232 
\f1 GATHERING FACTS ***************************************************************\'a0
\f0 \uc0\u8232 
\f1 ok: [127.0.0.1]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Install Telnet Client] *************************************************\'a0
\f0 \uc0\u8232 
\f1 ok: [127.0.0.1]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ********************************************************************\'a0
\f0 \uc0\u8232 
\f1 127.0.0.1\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=0\'a0\'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 \outl0\strokewidth0 \strokec3 Exercise: The Pause Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Run the appropriate ansible command to list all the hosts that are configured on your system for access by the control server. Display the ansible 'hosts' file in active use on the control server so that the hosts and groups are displayed.\
2. Create a full Ansible Playbook called 'pause.yml' with the following characteristics, incorporating the PAUSE module, display the playbook once created:\
- Connect to one (or a group) of hosts from the list displayed in Step #1 above\
- Force the playbook to run with 'sudo' privileges\
- Skip gathering facts on the remote system(s)\
- Using the appropriate package management module, install HTTPD/Apache on the remote system(s)\
- Using the PAUSE Module, Pause the Playbook so that the user has to press enter to continue the run\
- Using the appropriate package maangement module, check to see if the 'lynx' browser is installed\
3. Execute the playbook and display the results.\
\pard\pardeftab720\sl440\partightenfactor0
\cf0 \outl0\strokewidth0 Solution\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 \outl0\strokewidth0 \strokec3 1. Run the appropriate ansible command to list all the hosts that are configured on your system for access by the control server. Display the ansible 'hosts' file in active use on the control server so that the hosts and groups are displayed.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \

\f1 [test@tcox3 ~]$ cat /etc/ansible/hosts
\f0 \

\f1 [local]
\f0 \

\f1 localhost
\f0 \
\'a0\

\f1 [apacheweb]
\f0 \

\f1 tcox4.mylabserver.com
\f0 \

\f1 [appserver]
\f0 \

\f1 tcox5.mylabserver.com
\f0 \
\'a0\
2. Create a full Ansible Playbook called 'pause.yml' with the following characteristics, incorporating the PAUSE module, display the playbook once created:\
- Connect to one (or a group) of hosts from the list displayed in Step #1 above\
- Force the playbook to run with 'sudo' privileges\
- Skip gathering facts on the remote system(s)\
- Using the appropriate package management module, install HTTPD/Apache on the remote system(s)\
- Using the PAUSE Module, Pause the Playbook so that the user has to press enter to continue the run\
- Using the appropriate package maangement module, check to see if the 'lynx' browser is installed\

\f1 [test@tcox3 Playbooks]$ vim pause.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat pause.yml
\f0 \

\f1 --- # The Pause Module
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install HTTPD
\f0 \

\f1 \'a0 \'a0 action: yum name=httpd state=installed
\f0 \

\f1 \'a0 - name: Pausing
\f0 \

\f1 \'a0 \'a0 pause:
\f0 \

\f1 \'a0 \'a0 \'a0 prompt: Press ENTER to Continue...
\f0 \

\f1 \'a0 - name: Verify lynx installation
\f0 \

\f1 \'a0 \'a0 action: yum name=lynx state=present
\f0 \
\'a0\
3. Execute the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook pause.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install HTTPD] *********************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Pausing] ***************************************************************
\f0 \

\f1 [tcox4.mylabserver.com]
\f0 \

\f1 Press ENTER to Continue...:
\f0 \
\'a0\

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Verify lynx installation] **********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The WaitFor Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Run the appropriate ansible command to list all the hosts that are configured on your system for access by the control server. Display the ansible 'hosts' file in active use on the control server so that the hosts and groups are displayed.\
2. Create a full Ansible Playbook called 'waitfor.yml' with the following characteristics, incorporating the WAITFOR module, display the playbook once created:\
- Connect to one (or a group) of hosts from the list displayed in Step #1 above\
- Force the playbook to run with 'sudo' privileges\
- Skip gathering facts on the remote system(s)\
- Using the appropriate package management module, install Apache Tomcat\'a0on the remote system(s)\
- Using the\'a0WAITFOR\'a0Module, wait for port 8080 to start listening for connections before continuing\
- Using the appropriate package maangement module, check to see if the 'lynx' browser is installed\
3. Execute the playbook and display the results.\
\pard\pardeftab720\sl440\partightenfactor0
\cf0 \outl0\strokewidth0 \
solution:\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 \outl0\strokewidth0 \strokec3 1. Run the appropriate ansible command to list all the hosts that are configured on your system for access by the control server. Display the ansible 'hosts' file in active use on the control server so that the hosts and groups are displayed.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \

\f1 [test@tcox3 ~]$ cat /etc/ansible/hosts
\f0 \

\f1 [local]
\f0 \

\f1 localhost
\f0 \
\'a0\

\f1 [apacheweb]
\f0 \

\f1 tcox4.mylabserver.com
\f0 \

\f1 [appserver]
\f0 \

\f1 tcox5.mylabserver.com
\f0 \
\'a0\
2. Create a full Ansible Playbook called 'waitfor.yml' with the following characteristics, incorporating the WAITFOR module, display the playbook once created:\
- Connect to one (or a group) of hosts from the list displayed in Step #1 above\
- Force the playbook to run with 'sudo' privileges\
- Skip gathering facts on the remote system(s)\
- Using the appropriate package management module, install Apache Tomcat\'a0on the remote system(s)\
- Using the\'a0WAITFOR\'a0Module, wait for port 8080 to start listening for connections before continuing\
- Using the appropriate package maangement module, check to see if the 'lynx' browser is installed\

\f1 [test@tcox3 Playbooks]$ vim waitfor.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat waitfor.yml
\f0 \

\f1 --- # The Wait For Module
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Installing Apache Tomcat
\f0 \

\f1 \'a0 \'a0 \'a0 action: yum name=tomcat state=installed
\f0 \

\f1 \'a0 \'a0 - name: Waiting for Port 8080 to Listen
\f0 \

\f1 \'a0 \'a0 \'a0 wait_for:
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 port: 8080
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 state: started
\f0 \

\f1 \'a0 \'a0 - name: Verifying Lynx Installation
\f0 \

\f1 \'a0 \'a0 \'a0 action: yum name=lynx state=present
\f0 \
\'a0\
3. Execute the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook waitfor.yml
\f0 \

\f1 \'a0
\f0 \

\f1 PLAY [apacheweb] **************************************************************
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Installing Apache Tomcat] **********************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Waiting for Port 8080 to Listen] ***************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 (NOTE WHILE WAITING, THE FOLLOWING WAS DONE ON TCOX4) -------------------
\f0 \

\f1 [test@tcox4 ~]$ ps aux | grep tomcat
\f0 \

\f1 test \'a0 \'a0 \'a01620 \'a00.0 \'a00.0 112640 \'a0 964 pts/0 \'a0 \'a0R+ \'a0 18:01 \'a0 0:00 grep --color=auto tomcat
\f0 \

\f1 \'a0
\f0 \

\f1 [test@tcox4 ~]$ sudo systemctl start tomcat
\f0 \

\f1 ----------------------------------------------------------------------------------------
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Verifying Lynx Installation] *******************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 \'a0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The Setup Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Using the 'setup' module for ansible, list all of the known facts on the local system.\
4. Using the 'setup' module for ansible, list all of the known facts for all systems configured in the 'hosts' file on the system.\
5. While listing the facts on the local system, filter the list showing only the content pertaining to the system IP addresses.\
\
solution:\
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Using the 'setup' module for ansible, list all of the known facts on the local system.\

\f1 [test@tcox3 ~]$ ansible local -m setup\'a0
\f0 \

\f1 localhost | success >> \{
\f0 \

\f1 \'a0 \'a0 "ansible_facts": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_all_ipv4_addresses": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "172.31.107.208"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 ],\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_all_ipv6_addresses": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "fe80::103f:68ff:fefe:2bd1"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 ],\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_architecture": "x86_64",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_bios_date": "05/06/2015",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_bios_version": "4.2.amazon",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_cmdline": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "BOOT_IMAGE": "/boot/vmlinuz-3.10.0-229.14.1.el7.x86_64",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 (NOTE: Your output will be larger as this was concatenated for space and readability)
\f0 \
\'a0\
4. Using the 'setup' module for ansible, list all of the known facts for all systems configured in the 'hosts' file on the system.\

\f1 [test@tcox3 ~]$ ansible all -m setup\'a0
\f0 \

\f1 (NOTE: Localhost truncated here... starting with another host output)
\f0 \

\f1 tcox4.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "ansible_facts": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_all_ipv4_addresses": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "172.31.108.45"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 ],\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_all_ipv6_addresses": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "fe80::1029:fbff:fed6:9aaf"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 ],\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_architecture": "x86_64",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_bios_date": "05/06/2015",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_bios_version": "4.2.amazon",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_cmdline": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "BOOT_IMAGE": "/boot/vmlinuz-3.10.0-229.14.1.el7.x86_64",\'a0
\f0 \

\f1 \'a0\'a0 (NOTE: Your output will be larger as this was concatenated for space and readability)
\f0 \
\'a0\
5. While listing the facts on the local system, filter the list showing only the content pertaining to the system IP addresses.\

\f1 [test@tcox3 ~]$ ansible local -m setup -a 'filter=ans*ipv4*'
\f0 \

\f1 localhost | success >> \{
\f0 \

\f1 \'a0 \'a0 "ansible_facts": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_all_ipv4_addresses": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "172.31.107.208"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 ],\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "ansible_default_ipv4": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "address": "172.31.107.208",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "alias": "eth0",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "gateway": "172.31.96.1",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "interface": "eth0",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "macaddress": "12:3f:68:fe:2b:d1",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "mtu": 9001,\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "netmask": "255.255.240.0",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "network": "172.31.96.0",\'a0
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "type": "ether"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \}
\f0 \

\f1 \'a0 \'a0 \},\'a0
\f0 \

\f1 \'a0 \'a0 "changed": false
\f0 \

\f1 \'a0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Yum' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'yum' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Updates ALL packages on the remote system\
4. Run the playbook and display the results.\
\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'yum' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Updates ALL packages on the remote system\

\f1 [test@tcox3 Playbooks]$ vim yum.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat yum.yml
\f0 \

\f1 --- # Yum Module Example
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Equivalent of YUM UPGRADE
\f0 \

\f1 \'a0 \'a0 action: yum name=* state=latest
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook yum.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Equivalent of YUM UPGRADE] *********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Apt' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'apt' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
-\'a0Installs the Apache web server\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'apt' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
-\'a0Installs the Apache web server\

\f1 [test@tcox3 Playbooks]$ vim apt.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat apt.yml
\f0 \

\f1 --- # APT MODULE EXAMPLE
\f0 \

\f1 - hosts: aptserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install Apache Web Server
\f0 \

\f1 \'a0 \'a0 apt: name=apache2 state=present update_cache=yes
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook apt.yml
\f0 \
\'a0\

\f1 PLAY [aptserver] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install Apache Web Server] *********************************************
\f0 \

\f1 changed: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox1.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Service' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
-\'a0Installs the apache web server\
- Enables the apache web server service so it begins on reboot\
- Starts the apache web service\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
-\'a0Installs the apache web server\
- Enables the apache web server service so it begins on reboot\
- Starts the apache web service\

\f1 [test@tcox3 Playbooks]$ cat service.yml
\f0 \

\f1 --- # SERVICE MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install Web Server
\f0 \

\f1 \'a0 \'a0 action: yum name=httpd state=installed
\f0 \

\f1 \'a0 - name: Start the Web Server
\f0 \

\f1 \'a0 \'a0 service: name=httpd state=started
\f0 \

\f1 \'a0 - name: Enable HTTPD After Reboot
\f0 \

\f1 \'a0 \'a0 service: name=httpd enabled=yes
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook service.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 GATHERING FACTS ***************************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Install Web Server] ****************************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Start the Web Server] **************************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Enable HTTPD After Reboot] *********************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=4 \'a0 \'a0changed=3 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ telnet tcox4 80
\f0 \

\f1 Trying 54.175.189.40...
\f0 \

\f1 Connected to tcox4.
\f0 \

\f1 Escape character is '^]'.
\f0 \

\f1 helo
\f0 \
\'a0\
\'a0\

\f1 501 Not Implemented
\f0 \
\'a0\
\pard\pardeftab720\sl560\sa321\partightenfactor0

\b\fs48 \cf3 Not Implemented\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 helo to / not supported.\
\'a0\
\'a0\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 Connection closed by foreign host.
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Copy' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
-\'a0Copies a file from a local directory called 'files' and a file called 'text4.txt' (created separately) to the /home/test directory remotely\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
\'a0\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
-\'a0Copies a file from a local directory called 'files' and a file called 'text4.txt' (created separately) to the /home/test directory remotely\
[test@tcox3 Playbooks]$ vim copy.yml\

\f1 [test@tcox3 Playbooks]$ cat copy.yml
\f0 \

\f1 --- # COPY MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Copy from the files directory test file
\f0 \

\f1 \'a0 \'a0 action: copy src=files/test4.txt dest=/home/test/test4.txt owner=test group=test mode=0655 backup=yes
\f0 \

\f1 [test@tcox3 Playbooks]$ cd files
\f0 \

\f1 [test@tcox3 files]$ echo "this is text 4" > text4.txt
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook copy.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Copy from the files directory test file] *******************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 (SECOND SERVER)
\f0 \

\f1 [test@tcox4 ~]$ ll
\f0 \

\f1 total 4
\f0 \

\f1 drwxr-xr-x. 2 test test \'a06 Sep 19 19:33 playbooks
\f0 \

\f1 -rw-r-xr-x. 1 test test 10 Oct \'a06 15:13 test4.txt
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Command' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
-\'a0Runs a shell script called 'test.sh' in the remote directory of /home/test/testing (created separately)\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
-\'a0Runs a shell script called 'test.sh' in the remote directory of /home/test/testing (created separately)\

\f1 [test@tcox3 Playbooks]$ vim command.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat command.yml
\f0 \

\f1 --- # COMMAND MODULE EXAMPLE
\f0 \

\f1 - hosts: appserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Check for python packages
\f0 \

\f1 \'a0 \'a0 \'a0 command: /home/test/testing/test.sh
\f0 \

\f1 \'a0 \'a0 \'a0 args:
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 chdir: /home/test/testing
\f0 \

\f1 (SECOND SERVER)
\f0 \

\f1 [test@tcox5 testing]$ cat test.sh
\f0 \

\f1 #!/bin/bash
\f0 \
\'a0\

\f1 echo "This is a message" > output.txt
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook command.yml
\f0 \
\'a0\

\f1 PLAY [appserver] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Check for python packages] *********************************************
\f0 \

\f1 changed: [tcox5.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox5.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 (SECOND SERVER)
\f0 \

\f1 [test@tcox5 testing]$ ll
\f0 \

\f1 total 8
\f0 \

\f1 -rw-r--r--. 1 root root 18 Oct \'a06 15:17 output.txt
\f0 \

\f1 -rwxr-xr-x. 1 test test 51 Oct \'a03 21:34 test.sh
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Cron' Module 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook DOES NOT runs as 'sudo'\
- Creates a cron job, as the test user, that lists the contents of /var/log on the remote system at 1am every day, and logs the output to a file in /home/test called 'cron.log'. Name the job 'list dirs' as part of the command.\
4. Run the playbook and display the results.\
Solution\
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook DOES NOT runs as 'sudo'\
- Creates a cron job, as the test user, that lists the contents of /var/log on the remote system at 1am every day, and logs the output to a file in /home/test called 'cron.log'. Name the job 'list dirs' as part of the command.\

\f1 [test@tcox3 Playbooks]$ vim cron.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat cron.yml
\f0 \

\f1 --- # CRON MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Add a CRON Job to the Test User
\f0 \

\f1 \'a0 \'a0 \'a0 cron: name="list dirs" minute="0" hour="1" job="ls -al /var/log > /home/test/cron.log"
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook cron.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Add a CRON Job to the Test User] ***************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 (SECOND SERVER)
\f0 \

\f1 [test@tcox4 ~]$ crontab -l
\f0 \

\f1 #Ansible: list dirs
\f0 \

\f1 0 1 * * * ls -al /var/log > /home/test/cron.log
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Debug' Module 
\b0\fs24 \
\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Installs the Apache Web Server\
- Inserts a debugging statement indicating the equivalent command just run\
- Executes the uptime command on the server or group from Step #2 above, registers the output in a variable\
- Inserts a debugging statement displaying the output captured in the variable above\
4. Run the playbook and display the results.\
Solution\
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Installs the Apache Web Server\
- Inserts a debugging statement indicating the equivalent command just run\
- Executes the uptime command on the server or group from Step #2 above, registers the output in a variable\
- Inserts a debugging statement displaying the output captured in the variable above\

\f1 [test@tcox3 Playbooks]$ vim debug.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat debug.yml
\f0 \

\f1 --- # DEBUG MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install web server
\f0 \

\f1 \'a0 \'a0 \'a0 yum: name=httpd state=installed
\f0 \

\f1 \'a0 \'a0 - debug: msg="Equivalent of sudo yum install httpd"
\f0 \

\f1 \'a0 \'a0 - name: How Long has the system been up?
\f0 \

\f1 \'a0 \'a0 \'a0 shell: /usr/bin/uptime
\f0 \

\f1 \'a0 \'a0 \'a0 register: result
\f0 \

\f1 \'a0 \'a0 - debug: var=result
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook debug.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install web server] ****************************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [debug msg="Equivalent of sudo yum install httpd"] **********************
\f0 \

\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \

\f1 \'a0 \'a0 "msg": "Equivalent of sudo yum install httpd"
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 TASK: [How Long has the system been up?] **************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [debug var=result] ******************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \

\f1 \'a0 \'a0 "var": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "result": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "cmd": "/usr/bin/uptime",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "delta": "0:00:00.004499",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "end": "2015-10-07 14:52:59.002078",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "invocation": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "module_args": "/usr/bin/uptime",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "module_name": "shell"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \},
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "rc": 0,
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "start": "2015-10-07 14:52:58.997579",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "stderr": "",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "stdout": " 14:52:59 up 10 min, \'a01 user, \'a0load average: 0.16, 0.07, 0.06",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "stdout_lines": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 " 14:52:59 up 10 min, \'a01 user, \'a0load average: 0.16, 0.07, 0.06"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 ],
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "warnings": []
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \}
\f0 \

\f1 \'a0 \'a0 \}
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=4 \'a0 \'a0changed=2 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'User' Module 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Adds a user called 'tst' with the name of 'tst user', using the bash shell as the login shell and appending the 'wheel' group to that user's groups\

\f1 [test@tcox3 Playbooks]$ ]vim user.yml
\f0 \

\f1 -bash: ]vim: command not found
\f0 \

\f1 [test@tcox3 Playbooks]$ vim user.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat user.yml
\f0 \

\f1 --- # USER MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Add the user called tstapache to the apache web client
\f0 \

\f1 \'a0 \'a0 \'a0 user: name=tst comment="tst user" shell=/bin/bash groups=wheel append=yes
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook user.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Add the user called tstapache to the apache web client] ****************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Fetch' Module\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'fetch' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Copy the remote 'hosts' file from the remote /etc directory into the local directory of /home/test, make sure the local copy is named 'prefix-[hostname]' so it is obvious where it came from\
4. Run the playbook and display the results.\
\
Solution \
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'fetch' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Copy the remote 'hosts' file from the remote /etc directory into the local directory of /home/test, make sure the local copy is named 'prefix-[hostname]' so it is obvious where it came from\

\f1 [test@tcox3 Playbooks]$ vim fetch.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat fetch.yml
\f0 \

\f1 --- # FETCH MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Copy remote hosts file to control server
\f0 \

\f1 \'a0 \'a0 \'a0 fetch: src=/etc/hosts dest=/home/test/prefix-\{\{ ansible_hostname \}\} flat=yes
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook fetch.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 GATHERING FACTS ***************************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Copy remote hosts file to control server] ******************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ll ../pref*
\f0 \

\f1 -rw-rw-r--. 1 test test 192 Oct \'a07 15:25 ../prefix-tcox4
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'SetFact' Module\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Sets a local variable in the appropriate section called 'playbook_version' set to some arbitrary value\
- Sets a 'fact' in the appropriate section called 'singlefact' to some other arbitrary value\
- Uses the debug statement to print out, in JSON format, both of those values\
4. Run the playbook and display the results.\
\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'service' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Sets a local variable in the appropriate section called 'playbook_version' set to some arbitrary value\
- Sets a 'fact' in the appropriate section called 'singlefact' to some other arbitrary value\
- Uses the debug statement to print out, in JSON format, both of those values\

\f1 [test@tcox3 Playbooks]$ vim setfact.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat setfact.yml
\f0 \

\f1 --- # SET_FACT MODULE EXAMPLE
\f0 \

\f1 - hosts: appserver
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 vars:
\f0 \

\f1 \'a0 \'a0 playbook_version: 0.1
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Local Variable Display
\f0 \

\f1 \'a0 \'a0 \'a0 set_fact:
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 singlefact: SOMETHING
\f0 \

\f1 \'a0 \'a0 - debug: msg=\{\{ playbook_version \}\}
\f0 \

\f1 \'a0 \'a0 - debug: msg=\{\{ singlefact \}\}
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook setfact.yml
\f0 \
\'a0\

\f1 PLAY [appserver] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Local Variable Display] ************************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [debug msg=\{\{ playbook_version \}\}] **************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com] => \{
\f0 \

\f1 \'a0 \'a0 "msg": "0.1"
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 TASK: [debug msg=\{\{ singlefact \}\}] ********************************************
\f0 \

\f1 ok: [tcox5.mylabserver.com] => \{
\f0 \

\f1 \'a0 \'a0 "msg": "SOMETHING"
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox5.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'AT' Module 
\b0\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://linuxacademy.com/cp/exercises/view/id/193/module/59"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 Exercise Instructions}} \
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://linuxacademy.com/cp/exercises/view/id/193/module/59#/"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 Solution}} \
{\field{\*\fldinst{HYPERLINK "https://linuxacademy.com/cp/exercises/view/id/193/module/59#/"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 Mark as Completed}} \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\i\b \cf3 NOTE:\'a0
\b0 These exercises can be completed on Linux Academy Lab Servers with any distribution and version available AS LONG AS the Ansible application has been installed and the 'user' user has been set up with SSH Key Exchange for password less SSH sessions (see previous lab for setup).\'a0
\i0 \
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'AT' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Schedule a command to run in 1 minute that lists the contents of /var/log and creates a file in the home directory called at1.log with those contents\
4. Run the playbook and display the results.\
solution\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\

\f1 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'AT' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Schedule a command to run in 1 minute that lists the contents of /var/log and creates a file in the home directory called at1.log with those contents\

\f1 [test@tcox3 Playbooks]$ vim at.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat at.yml
\f0 \

\f1 --- # AT MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: sudo
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Example of a future command with the AT module
\f0 \

\f1 \'a0 \'a0 \'a0 at: command="ls /var/log > /home/test/at1.log" state=absent
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook at.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Example of a future command with the AT module] ************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'DNF' Module\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'DNF' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Use the DNF module to install the 'Development Tools' group\
4. Run the playbook and display the results.\
\
solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'DNF' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Use the DNF module to install the 'Development Tools' group\

\f1 [test@tcox3 Playbooks]$ vim dnf.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat dnf.yml
\f0 \

\f1 --- # DNF MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: DNF Update
\f0 \

\f1 \'a0 \'a0 \'a0 dnf: name="@Development tools" state=present
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook dnf.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [DNF Update] ************************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Shell' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'shell' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Execute the remote command 'uptime'. Provide arguments to that command by indicating the 'logs' directory should be changed to, indicate that the command creates a file called 'uptime.log' in that 'logs' directory.\
4. Run the playbook and display the results.\
\
solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'shell' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Execute the remote command 'uptime'. Provide arguments to that command by indicating the 'logs' directory should be changed to, indicate that the command creates a file called 'uptime.log' in that 'logs' directory.\

\f1 [test@tcox3 Playbooks]$ vim shell.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat shell.yml
\f0 \

\f1 --- # SHELL MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: sudo
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Executing a remote command - uptime
\f0 \

\f1 \'a0 \'a0 \'a0 shell: /usr/bin/uptime >> uptime.log
\f0 \

\f1 \'a0 \'a0 \'a0 args:
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 chdir: logs/
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 creates: uptime.log
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook shell.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Executing a remote command - uptime] ***********************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'SELinux' Module 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'selinux' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Change the remote SELinux policy from whatever value it currently is to 'Permissive' state and 'Targeted' policy.\
4. Run the playbook and display the results.\
solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'selinux' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Change the remote SELinux policy from whatever value it currently is to 'Permissive' state and 'Targeted' policy.\

\f1 [test@tcox3 Playbooks]$ vim selinux.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat selinux.yml
\f0 \

\f1 --- # SELINUX MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Change SELinux Configuration to Permissive
\f0 \

\f1 \'a0 \'a0 \'a0 selinux: policy=targeted state=permissive
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook selinux.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Change SELinux Configuration to Permissive] ****************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'SEBoolean' Module 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'seboolean' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Change the remote SELinux boolean value for 'http anonymous writes' to enabled, making it persistent on reboot\
4. Run the playbook and display the results.\
solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'seboolean' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Change the remote SELinux boolean value for 'http anonymous writes' to enabled, making it persistent on reboot\

\f1 [test@tcox3 Playbooks]$ vim seboolean.ym
\f0 \

\f1 [test@tcox3 Playbooks]$ cat seboolean.ym
\f0 \

\f1 --- # SEBOOLEAN MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Change Boolean for Anonymous Writes on the Web Server
\f0 \

\f1 \'a0 \'a0 \'a0 seboolean: name=httpd_anon_write state=yes persistent=yes
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook seboolean.ym
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Change Boolean for Anonymous Writes on the Web Server] *****************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ssh tcox4
\f0 \

\f1 Last login: Wed Oct 14 15:07:16 2015 from ec2-52-91-231-138.compute-1.amazonaws.com
\f0 \

\f1 [test@tcox4 ~]$ getsebool httpd_anon_write
\f0 \

\f1 httpd_anon_write --> on
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Raw' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'raw' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Run the uptime binary and log the output to a log file called 'uptime.log' on the remote host\
4. Run the playbook and display the results.\
solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'raw' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Run the uptime binary and log the output to a log file called 'uptime.log' on the remote host\

\f1 [test@tcox3 Playbooks]$ vim raw.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat raw.yml
\f0 \

\f1 --- # RAW MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Find the system uptime for the 'hosts' above
\f0 \

\f1 \'a0 \'a0 \'a0 raw: /usr/bin/uptime > uptime.log
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook raw.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Find the system uptime for the 'hosts' above] **************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ssh tcox4
\f0 \

\f1 Last login: Wed Oct 14 15:11:38 2015 from ec2-52-91-231-138.compute-1.amazonaws.com
\f0 \

\f1 [test@tcox4 ~]$ ll
\f0 \

\f1 total 6
\f0 \

\f1 drwxrwxr-x. 2 test test \'a0 23 Oct 10 20:19 logs
\f0 \

\f1 drwxr-xr-x. 2 test test \'a0 \'a06 Sep 19 19:33 playbooks
\f0 \

\f1 -rw-r--r--. 1 root root \'a0 62 Oct 14 15:11 uptime.log
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Ping' Module\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'ingl' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Runs a ping module against all hosts in the environment\

\f1 [test@tcox3 Playbooks]$ vim ping.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat ping.yml
\f0 \

\f1 --- # PING MODULE EXAMPLE
\f0 \

\f1 - hosts: all
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Ping all the hosts
\f0 \

\f1 \'a0 \'a0 \'a0 ping:
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook ping.yml
\f0 \
\'a0\

\f1 PLAY [all] ********************************************************************
\f0 \
\'a0\

\f1 TASK: [Ping all the hosts] ****************************************************
\f0 \

\f1 ok: [localhost]
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 localhost \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 tcox1.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 tcox5.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'HTPasswd' Module\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'htpasswd' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Install the 'python-passlib' package as appropriate to the server or group in Step #2 above\
- Create a user called 'test' in the web site authentication file called .htpasswd on the remote system in Step #2 above\
4. Run the playbook and display the results.\
solution\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://linuxacademy.com/cp/exercises/view/id/202/module/59#/"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 Completed}} \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'htpasswd' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Install the 'python-passlib' package as appropriate to the server or group in Step #2 above\
- Create a user called 'test' in the web site authentication file called .htpasswd on the remote system in Step #2 above\

\f1 [test@tcox3 Playbooks]$ vim htpasswd.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat htpasswd.yml
\f0 \

\f1 --- # HTPASSWD MODULE EXAMPLE
\f0 \

\f1 - hosts: aptserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install the python dependencies
\f0 \

\f1 \'a0 \'a0 \'a0 apt: pkg=python-passlib state=latest
\f0 \

\f1 \'a0 \'a0 - name: Adding a user to web site authentication
\f0 \

\f1 \'a0 \'a0 \'a0 htpasswd: path=/etc/apache2/.htpasswd name=test2 state=present
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook htpasswd.yml
\f0 \

\f1 \'a0
\f0 \

\f1 PLAY [aptserver] **************************************************************
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Install the python dependencies] ***************************************
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Adding a user to web site authentication] ******************************
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 \'a0
\f0 \

\f1 tcox1.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Debug' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'debug' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the apache web server as appropriate the server type in Step #2 above\
- Displays a debug message indicating the command equivalent of that module installation\
- Runs the 'uptime' utility on the server in Step #2 above\
- Registers the result in a variable and uses a debug statement to display the result JSON formatted variable\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'debug' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the apache web server as appropriate the server type in Step #2 above\
- Displays a debug message indicating the command equivalent of that module installation\
- Runs the 'uptime' utility on the server in Step #2 above\
- Registers the result in a variable and uses a debug statement to display the result JSON formatted variable\

\f1 [test@tcox3 Playbooks]$ vim debug.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat debug.yml
\f0 \

\f1 --- # DEBUG MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install web server
\f0 \

\f1 \'a0 \'a0 \'a0 yum: name=httpd state=installed
\f0 \

\f1 \'a0 \'a0 - debug: msg="Equivalent of sudo yum install httpd"
\f0 \

\f1 \'a0 \'a0 - name: How Long has the system been up?
\f0 \

\f1 \'a0 \'a0 \'a0 shell: /usr/bin/uptime
\f0 \

\f1 \'a0 \'a0 \'a0 register: result
\f0 \

\f1 \'a0 \'a0 - debug: var=result
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook debug.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install web server] ****************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [debug msg="Equivalent of sudo yum install httpd"] **********************
\f0 \

\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \

\f1 \'a0 \'a0 "msg": "Equivalent of sudo yum install httpd"
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 TASK: [How Long has the system been up?] **************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [debug var=result] ******************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \

\f1 \'a0 \'a0 "var": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "result": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "cmd": "/usr/bin/uptime",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "delta": "0:00:00.002803",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "end": "2015-10-12 17:36:19.743023",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "invocation": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "module_args": "/usr/bin/uptime",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "module_name": "shell"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \},
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "rc": 0,
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "start": "2015-10-12 17:36:19.740220",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "stderr": "",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "stdout": " 17:36:19 up 9 min, \'a01 user, \'a0load average: 0.00, 0.03, 0.05",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "stdout_lines": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 " 17:36:19 up 9 min, \'a01 user, \'a0load average: 0.00, 0.03, 0.05"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 ],
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "warnings": []
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \}
\f0 \

\f1 \'a0 \'a0 \}
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=4 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Fetch' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'fetch' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Copy the remote file '/etc/hosts' and write it to the current control server /home/test directory. Rename that file so that its name is 'prefix-HOST' where 'HOST' is the name of the server it originates from. Be sure the file copied is JUST the file, not the full reconstructed directory path.\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'fetch' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Copy the remote file '/etc/hosts' and write it to the current control server /home/test directory. Rename that file so that its name is 'prefix-HOST' where 'HOST' is the name of the server it originates from. Be sure the file copied is JUST the file, not the full reconstructed directory path.\

\f1 [test@tcox3 Playbooks]$ vim fetch.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat fetch.yml
\f0 \

\f1 --- # FETCH MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Copy remote hosts file to control server
\f0 \

\f1 \'a0 \'a0 \'a0 fetch: src=/etc/hosts dest=/home/test/prefix-\{\{ ansible_hostname \}\} flat=yes
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook fetch.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 GATHERING FACTS ***************************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Copy remote hosts file to control server] ******************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ll ../pre*
\f0 \

\f1 -rw-rw-r--. 1 test test 192 Oct 12 17:39 ../prefix-tcox4
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'User' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'user' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Creates a user called 'tst' on the remote host in Step #2 above. Add a text comment to the user, specify the login shell to be '/bin/bash' and append the user to the group 'wheel' during creation.\
4. Run the playbook and display the results.\
\
solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'user' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Creates a user called 'tst' on the remote host in Step #2 above. Add a text comment to the user, specify the login shell to be '/bin/bash' and append the user to the group 'wheel' during creation.\

\f1 [test@tcox3 Playbooks]$ vim user.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat user.yml
\f0 \

\f1 --- # USER MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Add the user called tstapache to the apache web client
\f0 \

\f1 \'a0 \'a0 \'a0 user: name=tst comment="tst user" shell=/bin/bash groups=wheel append=yes
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook user.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Add the user called tstapache to the apache web client] ****************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ssh tcox4
\f0 \

\f1 Last login: Mon Oct 12 17:43:29 2015 from ec2-54-210-68-108.compute-1.amazonaws.com
\f0 \

\f1 [test@tcox4 ~]$ cat /etc/passwd | grep tst
\f0 \
tst:x:1004:1004:tst user:/home/tst:/bin/bash\
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Stat' Module 
\b0\fs24 \
 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'stat' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Test for an arbitrary directory path in the remote /home/test directory, display a message using debug ONLY if the path exists\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'stat' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Test for an arbitrary directory path in the remote /home/test directory, display a message using debug ONLY if the path exists\

\f1 [test@tcox3 Playbooks]$ vim stat.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat stat.yml
\f0 \

\f1 --- # STAT MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - stat: path=/home/test/abc
\f0 \

\f1 \'a0 \'a0 register: p
\f0 \

\f1 \'a0 - debug: msg="The Path Exists and is a Directory"
\f0 \

\f1 \'a0 \'a0 when: p.stat.isdir is defined and p.stat.isdir
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook stat.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [stat path=/home/test/abc] **********************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [debug msg="The Path Exists and is a Directory"] ************************
\f0 \

\f1 skipping: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Script' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'script' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Executes a local script called 'system_uptime.sh' on the remote system in Step #2, but ONLY if the log file 'uptime.log' exists already.\
4. Create a script locally (on the control server) called 'system_uptime.sh'. This script should execute the uptime command and log the output to a file called 'uptime.log' in the /home/test directory.\
5. Run the playbook and display the results both when the remote log files exists and when it does not.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'script' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Executes a local script called 'system_uptime.sh' on the remote system in Step #2, but ONLY if the log file 'uptime.log' exists already.\

\f1 [test@tcox3 Playbooks]$ vim script.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat script.yml
\f0 \

\f1 --- # SCRIPT MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - script: /home/test/Playbooks/system_uptime.sh creates=/home/test/uptime.log
\f0 \
\'a0\
4. Create a script locally (on the control server) called 'system_uptime.sh'. This script should execute the uptime command and log the output to a file called 'uptime.log' in the /home/test directory.\

\f1 [test@tcox3 Playbooks]$ cat system_uptime.sh
\f0 \

\f1 #!/bin/bash
\f0 \
\'a0\

\f1 /usr/bin/uptime > /home/test/uptime.log
\f0 \
\'a0\
5. Run the playbook and display the results both when the remote log files exists and when it does not.\

\f1 (WHEN FILE EXISTS)
\f0 \

\f1 [test@tcox3 Playbooks]$ ansible-playbook script.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [script /home/test/Playbooks/system_uptime.sh creates=/home/test/uptime.log] ***
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 (WHEN FILE DOES NOT)
\f0 \

\f1 [test@tcox3 Playbooks]$ ansible-playbook script.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [script /home/test/Playbooks/system_uptime.sh creates=/home/test/uptime.log] ***
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'GetURL' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'get_url' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Downloads a file from any remote web server and places that file into the /home/test directory with 440 permissions.\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'get_url' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Downloads a file from any remote web server and places that file into the /home/test directory with 440 permissions.\

\f1 [test@tcox3 Playbooks]$ vim geturl.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat geturl.yml
\f0 \

\f1 --- # GET_URL MODULE EXAMPLE
\f0 \

\f1 - hosts: aptserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Get and download the INI file from the web server
\f0 \

\f1 \'a0 \'a0 \'a0 get_url: url=http://tcox1.mylabserver.com/mytest.ini dest=/home/test/mytest.ini mode=0440
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook geturl.yml
\f0 \
\'a0\

\f1 PLAY [aptserver] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Get and download the INI file from the web server] *********************
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox1.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ssh tcox
\f0 \

\f1 test@tcox1:~$ ls -al test.ini
\f0 \

\f1 -r--r----- 1 root root 36 Oct 16 00:19 test.ini
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Group' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'group' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Adds a new group called 'newgroup' to the remote host(s) in Step#2 above if it does not exist\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'group' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Adds a new group called 'newgroup' to the remote host(s) in Step#2 above if it does not exist\

\f1 [test@tcox3 Playbooks]$ vim group.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat group.yml
\f0 \

\f1 --- # GROUP MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Add a new group called newgroup
\f0 \

\f1 \'a0 \'a0 \'a0 group: name=newgroup state=absent
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook group.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Add a new group called newgroup] ***************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=1 \'a0 \'a0changed=0 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \

\f1 [test@tcox3 Playbooks]$ ssh tcox4
\f0 \

\f1 [test@tcox4 ~]$ cat /etc/group | grep new
\f0 \

\f1 newgroup:x:1008:
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Filesystem' Module 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'filesystem' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Format the remote filesystem device as an ext3 filesystem using the device path (not UUID or Label)\
4. Run the playbook and display the results.\
\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'filesystem' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Format the remote filesystem device as an ext3 filesystem using the device path (not UUID or Label)\

\f1 [test@tcox3 Playbooks]$ vim filesystem.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat filesystem.yml 
\f0 \uc0\u8232 
\f1 --- # FILESYSTEM MODULE EXAMPLE
\f0 \uc0\u8232 
\f1 - hosts: appserver
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: Format the remote data partition
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 filesystem: fstype=ext3 dev=/dev/xvdf1
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook filesystem.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [appserver] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Format the remote data partition] ************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox5.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox5.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=1\'a0\'a0\'a0 changed=1 \'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Mount' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'mount' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Mount the filesystem device that was formatted in the previous 'filesystem' exercise (see the NOTE above for more information) in the /mnt/data directory, make sure you indicate the ext3 filesystem and mount it explicitly 'read/write'\
4. Run the playbook and display the results.\
\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'mount' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Mount the filesystem device that was formatted in the previous 'filesystem' exercise (see the NOTE above for more information) in the /mnt/data directory, make sure you indicate the ext3 filesystem and mount it explicitly 'read/write'\

\f1 [test@tcox3 Playbooks]$ vim mount.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat mount.yml 
\f0 \uc0\u8232 
\f1 --- # MOUNT MODULE EXAMPLE
\f0 \uc0\u8232 
\f1 - hosts: appserver
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: mount the remote data partition
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 mount: name=/mnt/data src=/dev/xvdf1 fstype=ext3 opts=rw state=present
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook mount.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [appserver] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [mount the remote data partition] *************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox5.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox5.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=1\'a0\'a0\'a0 changed=1 \'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Mail' Module 
\b0\fs24 \
\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'mail' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Sends a message from the remote server in Step #2 above to the local test user, over the standard SMTP port indicating that the host is finished deploying the playbook\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'mail' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Sends a message from the remote server in Step #2 above to the local test user, over the standard SMTP port indicating that the host is finished deploying the playbook\

\f1 [test@tcox3 Playbooks]$ vim mail.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat mail.yml 
\f0 \uc0\u8232 
\f1 --- # MAIL MODULE EXAMPLE
\f0 \uc0\u8232 
\f1 - hosts: aptserver
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: Send an email to test user indicating build completion
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 mail:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 host='localhost'
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 port=25
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 to="test"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 subject="Our Host is Finished Deploying"
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 body='System called \{\{ ansible_hostname \}\} has been successfully set up'
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook mail.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [aptserver] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 GATHERING FACTS *************************************************************** 
\f0 \uc0\u8232 
\f1 ok: [tcox1.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 TASK: [Send an email to test user indicating build completion] **************** 
\f0 \uc0\u8232 
\f1 ok: [tcox1.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox1.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=2\'a0\'a0\'a0 changed=1 \'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Unarchive' Module\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a tar/gz file containing whatever content you want and name it test.tar.gz in the /home/test directory on your control server.\
4. Create a playbook, using the 'unarchive' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Copy and then expand the file from the control server to the remote server from Step #2 above\
5. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
3. Create a tar/gz file containing whatever content you want and name it test.tar.gz in the /home/test directory on your control server.\
4. Create a playbook, using the 'unarchive' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Copy and then expand the file from the control server to the remote server from Step #2 above\

\f1 [test@tcox3 Playbooks]$ vim unarchive.yml 
\f0 \uc0\u8232 
\f1 [test@tcox3 Playbooks]$ cat unarchive.yml 
\f0 \uc0\u8232 
\f1 --- # UNARCHIVE MODULE EXAMPLE
\f0 \uc0\u8232 
\f1 - hosts: aptserver
\f0 \uc0\u8232 
\f1 \'a0 user: test
\f0 \uc0\u8232 
\f1 \'a0 sudo: yes
\f0 \uc0\u8232 
\f1 \'a0 connection: ssh
\f0 \uc0\u8232 
\f1 \'a0 gather_facts: no
\f0 \uc0\u8232 
\f1 \'a0 tasks:
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0 - name: copy and unarchive a file
\f0 \uc0\u8232 
\f1 \'a0\'a0\'a0\'a0\'a0 unarchive: src=/home/test/local/test.tar.gz dest=/home/test/local copy=yes
\f0 \
5. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook unarchive.yml 
\f0 \uc0\u8232 \u8232 
\f1 PLAY [aptserver] ************************************************************** 
\f0 \uc0\u8232 \u8232 
\f1 TASK: [copy and unarchive a file] ********************************************* 
\f0 \uc0\u8232 
\f1 ok: [tcox1.mylabserver.com]
\f0 \uc0\u8232 \u8232 
\f1 PLAY RECAP ******************************************************************** 
\f0 \uc0\u8232 
\f1 tcox1.mylabserver.com\'a0\'a0\'a0\'a0\'a0 : ok=1\'a0\'a0\'a0 changed=1 \'a0\'a0 unreachable=0\'a0\'a0\'a0 failed=0
\f0 \
\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Notify' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'NOTIFY' concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Apache Web Server' using the appropriate package module\
- Upon installation of the web server, notifies the appropriately titled handler to restart the service using the 'service' module\
4. Run the playbook and display the results.\
Solution\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'NOTIFY'\'a0concepts from the video:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Installs the 'Apache Web Server' using the appropriate package module\
- Upon installation of the web server, notifies the appropriately titled handler to restart the service using the 'service' module\

\f1 [test@tcox3 Playbooks]$ vim notify.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat notify.yml
\f0 \

\f1 --- # My First YAML Playbook for Ansible
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install Apache Web Server
\f0 \

\f1 \'a0 \'a0 \'a0 action: yum name=httpd state=installed
\f0 \

\f1 \'a0 \'a0 \'a0 notify: Restart HTTPD
\f0 \

\f1 \'a0 handlers:
\f0 \

\f1 \'a0 \'a0 - name: Restart HTTPD
\f0 \

\f1 \'a0 \'a0 \'a0 action: service name=httpd state=restarted
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook notify.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install Apache Web Server] *********************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 NOTIFIED: [Restart HTTPD] *****************************************************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=2 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\

\f1 [test@tcox3 Playbooks]$ ssh tcox4
\f0 \

\f1 Last login: Wed Oct 14 15:27:43 2015 from ec2-52-91-231-138.compute-1.amazonaws.com
\f0 \

\f1 [test@tcox4 ~]$ ps aux | grep http
\f0 \

\f1 root \'a0 \'a0 \'a02042 \'a00.0 \'a00.4 213080 \'a04752 ? \'a0 \'a0 \'a0 \'a0Ss \'a0 15:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02043 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02044 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02045 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02046 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 apache \'a0 \'a02047 \'a00.0 \'a00.2 213080 \'a02752 ? \'a0 \'a0 \'a0 \'a0S \'a0 \'a015:27 \'a0 0:00 /usr/sbin/httpd -DFOREGROUND
\f0 \

\f1 test \'a0 \'a0 \'a02077 \'a00.0 \'a00.0 112640 \'a0 964 pts/0 \'a0 \'a0R+ \'a0 15:28 \'a0 0:00 grep --color=auto http
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'Apt Repo' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'apt_repository' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Gathers remote facts\
-\'a0Installs the dependency package 'python-apt'\
- Adds a repository (for example, the Google repository available at http://dl.google.com) as appropriate for the server\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'apt_repository' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Gathers remote facts\
-\'a0Installs the dependency package 'python-apt'\
- Adds a repository (for example, the Google repository available at http://dl.google.com) as appropriate for the server\

\f1 [test@tcox3 Playbooks]$ vim aptrepo.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat aptrepo.yml
\f0 \

\f1 --- # APT_REPOSITORY MODULE EXAMPLE/ALSO APT_KEY EXAMPLE
\f0 \

\f1 - hosts: aptserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install a dependency needed for apt_repository
\f0 \

\f1 \'a0 \'a0 \'a0 apt: pkg=python-apt state=latest
\f0 \

\f1 \'a0 \'a0 - name: Add the Google Repo for Ubuntu
\f0 \

\f1 \'a0 \'a0 \'a0 apt_repository: repo='deb http://dl.google.com/linux/deb/ stable main non-free' state=present
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook aptrepo.yml
\f0 \
\'a0\

\f1 PLAY [aptserver] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install a dependency needed for apt_repository] ************************
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Add the Google Repo for Ubuntu] ****************************************
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox1.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=2 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'AptKey' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'apt_key' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Gathers remote facts\
-\'a0Installs the dependency package 'python-apt'\
- Adds a repository (for example, the Google repository available at http://dl.google.com) as appropriate for the server\
- Adds the key for the repository in the previous step\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'apt_key' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Gathers remote facts\
-\'a0Installs the dependency package 'python-apt'\
- Adds a repository (for example, the Google repository available at http://dl.google.com) as appropriate for the server\
- Adds the key for the repository in the previous step\

\f1 [test@tcox3 Playbooks]$ vim aptkey.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat aptkey.yml
\f0 \

\f1 --- # APT_REPOSITORY MODULE EXAMPLE/ALSO APT_KEY EXAMPLE
\f0 \

\f1 - hosts: aptserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Install a dependency needed for apt_repository
\f0 \

\f1 \'a0 \'a0 \'a0 apt: pkg=python-apt state=latest
\f0 \

\f1 \'a0 \'a0 - name: Add the key
\f0 \

\f1 \'a0 \'a0 \'a0 apt_key: url=https://dl-ssl.google.com/linux/linux_signing_key.pub state=present
\f0 \

\f1 \'a0 \'a0 - name: Add the Google Repo for Ubuntu
\f0 \

\f1 \'a0 \'a0 \'a0 apt_repository: repo='deb http://dl.google.com/linux/deb/ stable main non-free' state=present
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook aptkey.yml
\f0 \
\'a0\

\f1 PLAY [aptserver] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Install a dependency needed for apt_repository] ************************
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Add the key] ***********************************************************
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [Add the Google Repo for Ubuntu] ****************************************
\f0 \

\f1 ok: [tcox1.mylabserver.com]
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox1.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=3 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'ACL' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'acl' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Sets user ACL characteristics on a remote file such that for the user called 'user', they have 'read/write' permissions on a file they would otherwise not have\
- Register the results of that command into a variable and use the 'debug' module to display the JSON formatted output of the ACL module changes\
4. Run the playbook and display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'acl' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to all the hosts from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
-\'a0Sets user ACL characteristics on a remote file such that for the user called 'user', they have 'read/write' permissions on a file they would otherwise not have\
- Register the results of that command into a variable and use the 'debug' module to display the JSON formatted output of the ACL module changes\

\f1 [test@tcox3 Playbooks]$ vim acl.yml
\f0 \

\f1 [test@tcox3 Playbooks]$ cat acl.yml
\f0 \

\f1 --- # ACL MODULE EXAMPLE
\f0 \

\f1 - hosts: apacheweb
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: no
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 \'a0 - name: Get ACL Information on the /etc/test.acl.txt remote file
\f0 \

\f1 \'a0 \'a0 \'a0 acl: name=/etc/test.acl.txt entity=test etype=user permissions="rw" state=absent
\f0 \

\f1 \'a0 \'a0 \'a0 register: aclinfo
\f0 \

\f1 \'a0 \'a0 - debug: var=aclinfo
\f0 \
\'a0\
4. Run the playbook and display the results.\

\f1 [test@tcox3 Playbooks]$ ansible-playbook acl.yml
\f0 \
\'a0\

\f1 PLAY [apacheweb] **************************************************************
\f0 \
\'a0\

\f1 TASK: [Get ACL Information on the /etc/test.acl.txt remote file] **************
\f0 \

\f1 changed: [tcox4.mylabserver.com]
\f0 \
\'a0\

\f1 TASK: [debug var=aclinfo] *****************************************************
\f0 \

\f1 ok: [tcox4.mylabserver.com] => \{
\f0 \

\f1 \'a0 \'a0 "var": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "aclinfo": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "acl": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "user::rw-",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "user:test:rw-",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "group::r--",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "mask::rw-",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "other::r--"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 ],
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "invocation": \{
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "module_args": "name=/etc/test.acl.txt entity=test etype=user permissions=\\"rw\\" state=present",
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "module_name": "acl"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \},
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 "msg": "user:test:rw- is present"
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 \}
\f0 \

\f1 \'a0 \'a0 \}
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 PLAY RECAP ********************************************************************
\f0 \

\f1 tcox4.mylabserver.com \'a0 \'a0 \'a0: ok=2 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: The 'MySQL_DB' Module 
\b0\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'mysql_db' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Install the required MySQL Python Support Libraries (if needed)\
-\'a0Using the appropriate system credentials, create a database called MyNewDB\
4. Run the playbook and display the results.\
\
Solution..\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'mysql_db' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Install the required MySQL Python Support Libraries (if needed)\
-\'a0Using the appropriate system credentials, create a database called MyNewDB\

\f1 [test@tcox3 Playbooks]$ vim mysqldb.yml\'a0
\f0 \

\f1 [test@tcox3 Playbooks]$ cat mysqldb.yml\'a0
\f0 \

\f1 --- # MYSQL_DB MODULE DEMO
\f0 \

\f1 - hosts: appserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: yes
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install the Python MySQL Support Libraries
\f0 \

\f1 \'a0 \'a0 yum: pkg=MySQL-python state=latest
\f0 \

\f1 \'a0 - name: Create a New Test DB called MyNewDB
\f0 \

\f1 \'a0 \'a0 mysql_db: name=MyNewDB state=present login_user=root login_password=password123
\f0 \
\'a0\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f2 \cf3 4. Run the playbook and display the results.
\f1 \'a0
\f0 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 Playbooks]$ vim mysqldb.yml\'a0
\f0 \

\f1 [test@tcox3 Playbooks]$ cat mysqldb.yml\'a0
\f0 \

\f1 --- # MYSQL_DB MODULE DEMO
\f0 \

\f1 - hosts: appserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: yes
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install the Python MySQL Support Libraries
\f0 \

\f1 \'a0 \'a0 yum: pkg=MySQL-python state=latest
\f0 \

\f1 \'a0 - name: Create a New Test DB called MyNewDB
\f0 \

\f1 \'a0 \'a0 mysql_db: name=MyDBTest state=present login_user=root login_password=password123
\f0 \

\f1 \'a0
\f0 \

\f1 [test@tcox3 Playbooks]$ vim mysqldb.yml\'a0
\f0 \

\f1 [test@tcox3 Playbooks]$ ansible-playbook mysqldb.yml\'a0
\f0 \

\f1 \'a0
\f0 \

\f1 PLAY [appserver] **************************************************************\'a0
\f0 \

\f1 \'a0
\f0 \

\f1 GATHERING FACTS ***************************************************************\'a0
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Install the Python MySQL Support Libraries] ****************************\'a0
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Create a New Test DB called MyNewDB] ***********************************\'a0
\f0 \

\f1 changed: [tcox5.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 PLAY RECAP ********************************************************************\'a0
\f0 \
\'a0\

\f1 tcox5.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0\'a0
\f0 \
\'a0\

\f1 MariaDB [(none)]> show databases;
\f0 \

\f1 +--------------------+
\f0 \

\f1 | Database \'a0 \'a0 \'a0 \'a0 \'a0 |
\f0 \

\f1 +--------------------+
\f0 \

\f1 | information_schema |
\f0 \

\f1 | MyDBTest \'a0 \'a0 \'a0 \'a0 \'a0 |
\f0 \

\f1 | MyNewDB \'a0 \'a0 \'a0 \'a0 \'a0 \'a0|
\f0 \

\f1 | mysql \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0|
\f0 \

\f1 | performance_schema |
\f0 \

\f1 +--------------------+
\f0 \
\'a0\

\f1 5 rows in set (0.00 sec)
\f0 \
\'a0
\b\fs36 Exercise: The 'MySQL_User' Module\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Create a playbook, using the 'mysql_user' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Install the required MySQL Python Support Libraries (if needed)\
-\'a0Using the appropriate system credentials, create a\'a0new user called 'bob', give that user access to ALL databases and tables with ALL privileges EXCEPT Grant\
4. Run the playbook and display the results.\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 \
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Create a playbook, using the 'mysql_user' module that accomplishes the following:\
- Uses SSH\
- Logs in to the remote system as 'test' user\
- Connects to one server or group from Step #2 above\
- The playbook runs as 'sudo'\
- Skip gathering remote facts\
- Install the required MySQL Python Support Libraries (if needed)\
-\'a0Using the appropriate system credentials, create a\'a0new user called 'bob', give that user access to ALL databases and tables with ALL privileges EXCEPT Grant\

\f1 [test@tcox3 Playbooks]$ vim mysqluser.yml\'a0
\f0 \

\f1 [test@tcox3 Playbooks]$ cat mysqluser.yml\'a0
\f0 \

\f1 --- # MYSQL_USER MODULE DEMO
\f0 \

\f1 - hosts: appserver
\f0 \

\f1 \'a0 user: test
\f0 \

\f1 \'a0 sudo: yes
\f0 \

\f1 \'a0 connection: ssh
\f0 \

\f1 \'a0 gather_facts: yes
\f0 \

\f1 \'a0 tasks:
\f0 \

\f1 \'a0 - name: Install the MySQL Python Support Library
\f0 \

\f1 \'a0 \'a0 yum: pkg=MySQL-python state=latest
\f0 \

\f1 \'a0 - name: Create a new user called BOB and give him all access
\f0 \

\f1 \'a0 \'a0 mysql_user: name=bob password=123password priv=*.*:ALL state=present login_user=root login_password=password123
\f0 \
\'a0\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\f2 \cf3 4. Run the playbook and display the results.
\f0 \'a0\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 Playbooks]$ ansible-playbook mysqluser.yml\'a0
\f0 \

\f1 \'a0
\f0 \

\f1 PLAY [appserver] **************************************************************\'a0
\f0 \

\f1 \'a0
\f0 \

\f1 GATHERING FACTS ***************************************************************\'a0
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Install the MySQL Python Support Library] ******************************\'a0
\f0 \

\f1 ok: [tcox5.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 TASK: [Create a new user called BOB and give him all access] ******************\'a0
\f0 \

\f1 changed: [tcox5.mylabserver.com]
\f0 \

\f1 \'a0
\f0 \

\f1 PLAY RECAP ********************************************************************\'a0
\f0 \
\'a0\

\f1 tcox5.mylabserver.com \'a0 \'a0 \'a0: ok=3 \'a0 \'a0changed=1 \'a0 \'a0unreachable=0 \'a0 \'a0failed=0 \'a0
\f0 \
\'a0\

\f1 [test@tcox5 ~]$ mysql -u bob -p
\f0 \

\f1 Enter password:\'a0
\f0 \

\f1 Welcome to the MariaDB monitor. \'a0Commands end with ; or \\g.
\f0 \

\f1 Your MariaDB connection id is 5
\f0 \

\f1 Server version: 5.5.44-MariaDB MariaDB Server
\f0 \

\f1 \'a0
\f0 \

\f1 Copyright (c) 2000, 2015, Oracle, MariaDB Corporation Ab and others.
\f0 \

\f1 \'a0
\f0 \

\f1 Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.
\f0 \

\f1 \'a0
\f0 \

\f1 MariaDB [(none)]> show databases;
\f0 \

\f1 +--------------------+
\f0 \

\f1 | Database \'a0 \'a0 \'a0 \'a0 \'a0 |
\f0 \

\f1 +--------------------+
\f0 \

\f1 | information_schema |
\f0 \

\f1 | MyDBTest \'a0 \'a0 \'a0 \'a0 \'a0 |
\f0 \

\f1 | MyNewDB \'a0 \'a0 \'a0 \'a0 \'a0 \'a0|
\f0 \

\f1 | mysql \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0|
\f0 \

\f1 | performance_schema |
\f0 \

\f1 +--------------------+
\f0 \
\'a0\

\f1 5 rows in set (0.00 sec)
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: Ansible Command Line - Installing Packages\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
- Uses one of the modules for\'a0installing packages\
-\'a0Install the package 'lynx' on the remote server(s)\
4. Display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
- Uses one of the modules for\'a0installing packages\
-\'a0Install the package 'lynx' on the remote server(s)\

\f1 [test@tcox3 roles]$ ansible apacheweb -u test -s -m yum -a "pkg=lynx state=latest"
\f0 \
\'a0\
\'a0\
4. Display the results.\

\f1 tcox4.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 "msg": "",
\f0 \

\f1 \'a0 \'a0 "rc": 0,
\f0 \

\f1 \'a0 \'a0 "results": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "Loaded plugins: fastestmirror\\nLoading mirror speeds from cached hostfile\\n * base: mirror.symnds.com\\n * extras: mirror.cogentco.com\\n * updates: mirrors.advancedhosters.com\\nResolving Dependencies\\n--> Running transaction check\\n---> Package lynx.x86_64 0:2.8.8-0.3.dev15.el7 will be installed\\n--> Finished Dependency Resolution\\n\\nDependencies Resolved\\n\\n================================================================================\\n Package \'a0 \'a0 \'a0 Arch \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Version \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0Repository \'a0 \'a0 Size\\n================================================================================\\nInstalling:\\n lynx \'a0 \'a0 \'a0 \'a0 \'a0x86_64 \'a0 \'a0 \'a0 \'a0 \'a02.8.8-0.3.dev15.el7 \'a0 \'a0 \'a0 \'a0 \'a0base \'a0 \'a0 \'a0 \'a0 \'a01.4 M\\n\\nTransaction Summary\\n================================================================================\\nInstall \'a01 Package\\n\\nTotal download size: 1.4 M\\nInstalled size: 5.4 M\\nDownloading packages:\\nRunning transaction check\\nRunning transaction test\\nTransaction test succeeded\\nRunning transaction\\n \'a0Installing : lynx-2.8.8-0.3.dev15.el7.x86_64 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a01/1 \\n \'a0Verifying \'a0: lynx-2.8.8-0.3.dev15.el7.x86_64 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a01/1 \\n\\nInstalled:\\n \'a0lynx.x86_64 0:2.8.8-0.3.dev15.el7 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \\n\\nComplete!\\n"
\f0 \

\f1 \'a0 \'a0 ]
\f0 \

\f1 \}
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: Ansible Command Line - Managing Services\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
- Uses\'a0the 'service' module, start the HTTPD service installed during an earlier exercise\
4. Display the results.\
\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
- Uses\'a0the 'service' module, start the HTTPD service installed during an earlier exercise\

\f1 [test@tcox3 roles]$ ansible apacheweb -u test -s -m service -a "name=httpd state=started"
\f0 \
\'a0\
\'a0\
4. Display the results.\

\f1 tcox4.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 "name": "httpd",
\f0 \

\f1 \'a0 \'a0 "state": "started"
\f0 \

\f1 \}
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: Ansible Command Line - Managing Users\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
-\'a0Uses the 'user' module to add a user called 'johnsmith' with the default shell being 'bash' and indicate a unique UID\
4. Display the results.\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
-\'a0Uses the 'user' module to add a user called 'johnsmith' with the default shell being 'bash' and indicate a unique UID\

\f1 [test@tcox3 ~]$ ansible redhat -u test -s -m user -a "name=johnsmith uid=25001 shell=/bin/bash"
\f0 \
\'a0\
\'a0\
4. Display the results.\

\f1 tcox4.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 "comment": "",
\f0 \

\f1 \'a0 \'a0 "createhome": true,
\f0 \

\f1 \'a0 \'a0 "group": 25001,
\f0 \

\f1 \'a0 \'a0 "home": "/home/johnsmith",
\f0 \

\f1 \'a0 \'a0 "name": "johnsmith",
\f0 \

\f1 \'a0 \'a0 "shell": "/bin/bash",
\f0 \

\f1 \'a0 \'a0 "state": "present",
\f0 \

\f1 \'a0 \'a0 "system": false,
\f0 \

\f1 \'a0 \'a0 "uid": 25001
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 localhost | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 "comment": "",
\f0 \

\f1 \'a0 \'a0 "createhome": true,
\f0 \

\f1 \'a0 \'a0 "group": 25001,
\f0 \

\f1 \'a0 \'a0 "home": "/home/johnsmith",
\f0 \

\f1 \'a0 \'a0 "name": "johnsmith",
\f0 \

\f1 \'a0 \'a0 "shell": "/bin/bash",
\f0 \

\f1 \'a0 \'a0 "state": "present",
\f0 \

\f1 \'a0 \'a0 "system": false,
\f0 \

\f1 \'a0 \'a0 "uid": 25001
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 tcox5.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 "comment": "",
\f0 \

\f1 \'a0 \'a0 "createhome": true,
\f0 \

\f1 \'a0 \'a0 "group": 25001,
\f0 \

\f1 \'a0 \'a0 "home": "/home/johnsmith",
\f0 \

\f1 \'a0 \'a0 "name": "johnsmith",
\f0 \

\f1 \'a0 \'a0 "shell": "/bin/bash",
\f0 \

\f1 \'a0 \'a0 "state": "present",
\f0 \

\f1 \'a0 \'a0 "system": false,
\f0 \

\f1 \'a0 \'a0 "uid": 25001
\f0 \

\f1 \}
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: Ansible Command Line - Managing CRON Jobs\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
-\'a0Adds a root cron job with a name (you assign it) that runs a list of the /var directory on the system and logs to the root home directory in a file called 'var.log', every day of week/month at the same time\
4. Display the results and the resulting CRON entry\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
-\'a0Adds a root cron job with a name (you assign it) that runs a list of the /var directory on the system and logs to the root home directory in a file called 'var.log', every day of week/month at the same time\

\f1 [test@tcox3 ~]$ ansible redhat -u test -s -m cron -a "name='crontest' minute='0' hour='12' job='ls -al /var > /root/var.log'"
\f0 \
\'a0\
\'a0\
4. Display the results and the resulting CRON entry\

\f1 tcox4.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 "jobs": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "crontest"
\f0 \

\f1 \'a0 \'a0 ]
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 localhost | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 "jobs": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "crontest"
\f0 \

\f1 \'a0 \'a0 ]
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 tcox5.mylabserver.com | success >> \{
\f0 \

\f1 \'a0 \'a0 "changed": true,
\f0 \

\f1 \'a0 \'a0 "jobs": [
\f0 \

\f1 \'a0 \'a0 \'a0 \'a0 "crontest"
\f0 \

\f1 \'a0 \'a0 ]
\f0 \

\f1 \}
\f0 \
\'a0\

\f1 [test@tcox3 ~]$ sudo crontab -l
\f0 \

\f1 #Ansible: crontest
\f0 \

\f1 0 12 * * * ls -al /var > /root/var.log
\f0 \
\'a0\
\pard\pardeftab720\sl440\partightenfactor0

\b\fs36 \cf3 Exercise: Ansible Command Line - Run Arbitrary System Commands 
\b0\fs24 \
\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf3 1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
-\'a0Displays the contents of each server(s) remote /etc/fstab file locally using ONLY the command line (no module)\
4. Display the results.\
\
Solution:\
1. Verify that your ansible installation is available by displaying the version of ansible while logged in as the 'user' user.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf3 [test@tcox3 ~]$ ansible --version
\f0 \

\f1 ansible 1.9.2
\f0 \

\f1 \'a0 configured module search path = None
\f0 \
\'a0\
2. Run the ansible command that lists all of the hosts configured in your control server 'hosts' file for the system.\

\f1 [test@tcox3 ~]$ ansible all --list-hosts
\f0 \

\f1 \'a0 \'a0 tcox5.mylabserver.com
\f0 \

\f1 \'a0 \'a0 localhost
\f0 \

\f1 \'a0 \'a0 tcox4.mylabserver.com
\f0 \
\'a0\
3. Using the 'ansible' command line utility, execute a ONE LINE ansible command that does the following:\
- Runs against the server/group chosen in Step #2\
- Uses the 'test' user to run the command\
- Executes the command with 'sudo' privileges\
-\'a0Displays the contents of each server(s) remote /etc/fstab file locally using ONLY the command line (no module)\
[test@tcox3 ~]$ ansible all -u test -a "cat /etc/fstab"\
\'a0\
\'a0\
4. Display the results.\

\f1 localhost | success | rc=0 >>
\f0 \
\'a0\

\f1 #
\f0 \

\f1 # /etc/fstab
\f0 \

\f1 # Created by anaconda on Mon Sep 29 21:48:54 2014
\f0 \

\f1 #
\f0 \

\f1 # Accessible filesystems, by reference, are maintained under '/dev/disk'
\f0 \

\f1 # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
\f0 \

\f1 #
\f0 \

\f1 UUID=0f790447-ebef-4ca0-b229-d0aa1985d57f / \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 xfs \'a0 \'a0 defaults \'a0 \'a0 \'a0 \'a01 1
\f0 \

\f1 /root/swap swap swap sw 0 0
\f0 \
\'a0\

\f1 tcox4.mylabserver.com | success | rc=0 >>
\f0 \
\'a0\

\f1 #
\f0 \

\f1 # /etc/fstab
\f0 \

\f1 # Created by anaconda on Mon Sep 29 21:48:54 2014
\f0 \

\f1 #
\f0 \

\f1 # Accessible filesystems, by reference, are maintained under '/dev/disk'
\f0 \

\f1 # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
\f0 \

\f1 #
\f0 \

\f1 UUID=0f790447-ebef-4ca0-b229-d0aa1985d57f / \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 xfs \'a0 \'a0 defaults \'a0 \'a0 \'a0 \'a01 1
\f0 \

\f1 /root/swap swap swap sw 0 0
\f0 \
\'a0\

\f1 tcox5.mylabserver.com | success | rc=0 >>
\f0 \
\'a0\

\f1 #
\f0 \

\f1 # /etc/fstab
\f0 \

\f1 # Created by anaconda on Mon Sep 29 21:48:54 2014
\f0 \

\f1 #
\f0 \

\f1 # Accessible filesystems, by reference, are maintained under '/dev/disk'
\f0 \

\f1 # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
\f0 \

\f1 #
\f0 \

\f1 UUID=0f790447-ebef-4ca0-b229-d0aa1985d57f / \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 xfs \'a0 \'a0 defaults \'a0 \'a0 \'a0 \'a01 1
\f0 \

\f1 /root/swap swap swap sw 0 0
\f0 \

\f1 /dev/xvdf1 /mnt/data ext3 rw 0 0
\f0 \
\'a0\

\f1 tcox1.mylabserver.com | success | rc=0 >>
\f0 \

\f1 LABEL=cloudimg-rootfs \'a0 / \'a0 \'a0 \'a0 \'a0ext4 \'a0 defaults,discard \'a0 \'a0 \'a0 \'a00 0
\f0 \
\'a0\
}